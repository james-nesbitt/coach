- Type: File
  Path: README.md
  Contents: |
    # COACH DEMO: Scaling LAMP

    This coach demo provides a scaling LAMP stack:

    - a single DB service using jamesnesbitt/wunder-mariadb

    - a scaling set of nginx/fpm pairs, starting at 3
      but scaling up to 9 instances.

      @these come in pairs to allow scaling http access, but
        DNS should work if you do some local magic.

    To incorporate source, the source code from /app/source
    is mapped into a "source" container, which is used in
    the nginx and fpm containers.

    The Database is un-initialized, but an optional init
    build for a db has been included, and you can switch to
    it by removing the db node, and uncommenting the custom
    db node.

    All of the suggested images in this project are based on
    the wunder-base concept, which is used to provide a commong
    /app project folder, and similar users/OS, to keep access
    privileges working better.
    The builds are all CentOS7, EPEL and often REMI based builds.

    # Getting Started:

      You already did this:

        #/> coach init demo lamp_scaling

      Now just do this:

        $/> coach up

      This should:

        - download some images
        - build any local images that were defined
        - create a source container which will map ./app/source to /app/www/active

        - start some nginx containers, and  some fpm containers and a single db container

      You should then have

        - http access to all nginx services by directly pointing to the container

    # Day to day use

    ## starting and stopping

        $/> coach stop
        $/> coach start

    ## starting and stopping more instances

      Use the scale operation to start additional instances:

        $/> coach scale up

      And the same operation to scale down

        $/> coach scale down

    ## starting a specific container

      - start a specific node

        $/> coach @www start

      - start all service nodes

        $/> coach %service start

    ## rebuild any containers

      1. stop any running containers

        $/> coach stop

      2. remove and created containers

        $/> coach remove

      3. recreate and containers

        $/> coach create

      4. start the new containers

        $/> coach start

- Type: File
  Path: .coach/conf.yml
  Contents: |
    # Coach project conf
    #
    # Configurations for the coach project
    #
    # Project: project name, used to create container names
    # Author: used for docker commits & pushes.
    #   @note this needs to be valid for container names/images
    #     so it can contain alpha-numeric & "_"
    #
    # Tokens: a string map for string substitutions elsewhere
    #    by using the format %{key} in files loaded after this
    #    one
    #
    # Paths: a string map of paths that you can use for 
    #    things like docker builds and mounts.  Paths can be 
    #    absolute or relative to the project root.
    #    Note that you can override the following paths:
    #      - usertemplates : path to users init templates
    #      - usersecrets : path to user secrets
    #      - projectsecrets : path to project secrets
    #      - build : path to builds
    #    Paths are also made available as tokens using the
    #    format PATH_{UPPERCASEKEY}
    #

    # Project name
    Project: lampscaler

    Author: me

    # Custom Tokens
    Tokens:
      # Set a container domain, which containers can pull in as ENV or box domains
      CONTAINER_DOMAIN: demo.coach

- Type: File
  Path: .coach/nodes.yml
  Contents: |
###
# Project nodes
#
# A string map of node configurations, each entry is a node, which 
# corresponds to a set of containers based on a single image.  the
# nodes have different types, an different purposes:
#
# Instances
#
# Note that while the source and db nodes will have single containers,
# the www and fpm nodes will run somewhere between 3 and 9 containers
# The www and fpm containers will try to correspond their links, but
# all fpm containers will connect to the same DB and source containers
#
###

###
# A volume container to hold source
#
# Using a conmtainer to hold source, even if it just locally binded source, is
# a good idea, because it replicates what a production service would do.  It would
# have source copied/exported/retrieved in, and make it available in the same way
#
source:
  Type: volume

  Config:
    Image: jamesnesbitt/wunder-base # RUn from a standard base image
  Host:
    Binds:
      - "app/source:/app/www/active" # map the local source folder, into where the nginx/fpm expect the web root

###
# Database service
#
# This container is a base DB image with no existing DB, nor access.  Consider 
# using a local build, to extend a base DB image, adding in a db, adding a user
# and setting exactly what access credentials that you want
#
db:
  Type: service

  Config:
    Image: jamesnesbitt/wunder-mariadb  # this base db image has no running db, user, access yet

###
# FPM service
#
# This node implements a scaling number of PHP7 FPM services from the same
# image, running concurrently.
#
# Each instance will connect to the same single DB container.
#
fpm:
  Type: service

  Instances: scaled 3 9

  Config:
    Image: jamesnesbitt/wunder-php7fpm     # The FPM delivers the latest PHP7

  Host:
    Links:
      - db:db.app # make the db container available as db.app
    VolumesFrom:
      - source  # map in all volumes from the source container

###
# WWW service
#
# A scaling nginx node, that offers multiple instances of the same
# image running concurrently.
#
# Each instance expects to have a matching FPM instance to link to
# and will try to link to the instance with the matching instance id
#
# @note instance IDs are integer values
# @note the container hostname will include the instance
#
www:
  Type: service

  Instances: scaled 3 9

  Config:
    Image: jamesnesbitt/wunder-nginx  # Recent nginx build using nginx provided centos repo
    Hostname: "%PROJECT_%INSTANCE" # Tokens derived from the project and instance id
    Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
    Env:
      - "DNSDOCK_ALIAS=%INSTANCE.%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
    ExposedPorts:
      80/tcp: {}

  Host:
    Links:
      - fpm:fpm.app # make the fpm service available as fpm.app
    VolumesFrom:
      - source  # map in all volumes from the source container
    PortBindings:
      80/tcp:
        - HostPort: "808%INSTANCE" # Port 808X applies to all Host IPs


- Type: File
  Path: app/README.md
  Contents: |
    # DEMO lamp

    ## /app/source

      Project source-code and assets path

- Type: File
  Path: app/source/index.php
  Contents: |
    <?php
    /**
     * Put your PHP source code here
     *
     * Not that in this demo project, only this folder gets mapped into
     * the source container, so relative includes that point above will
     * fail.  You can change the source node bind as needed.
     */

    phpinfo();
