###
# Complete DEMO initialization
#
# This YAML file contains a sequence of instructions passed to the
# coach init operation, each of which will either output a meesage
# or create some local project files.
#
###

#
# Examples
#

# Output a messge
# - Type: Message
#   Message: |
#     Coach will now create a project, based on the "complete" demo.
#
#     The initialization process will create a number of files in the
#     current path, including the required .coach/ files, and the
#     application specific files.
#     Each file should generate a message, and the git clone used to
#     retrieve /app/source path will be explicit.
#
#     Once the init process is completed, you will want to:
#
#     - investigate, and maybe change the .coach files
#     - initialize the project using the "coach up" operation

# Create a file
# - Type: File
#   Path: README.md
#   Contents: |
#     Some Contents


# Check out a git copy of the project source
# - Type: GitClone
#   Path: /app/source
#   Url: https://github.com/drupal/drupal.git

# Copy user git settings to the project settings
# - Type: FileCopy
#   Path: app/settings/git
#   Source: ~/.git

#
# Actual Init
#

- Type: Message
  Message: |
    Coach will now create a project, based on the "complete" demo.

    The initialization process will create a number of files in the
    current path, including the required .coach/ files, and the
    application specific files.
    Each file should generate a message, and the git clone used to
    retrieve /app/source path will be explicit.

    Once the init process is completed, you will want to:

    - investigate, and maybe change the .coach files
    - initialize the project using the "coach up" operation

# Create a file
- Type: File
  Path: README.md
  Contents: |
    # COACH DEMO: Complete Demo

    This coach demo offers a relatively full feature complete
    demo of settings and features of a coach project.  It
    contains an exhaustive set of features.

    THE GOAL OF THIS INIT IS NOT TO PROVIDE A WORKING SAMPLE
    but rather to demonstrate settings.  I will try to keep 
    things working, but I will not write exhaustive examples
    of some functionality, such as source building.

    This coach demo provides a standard LAMP stack:

    - Nginx service using jamesnesbitt/wunder-nginx
    - PHP-FPM service using jamesnesbitt/wunder-php56fpm
    - DB service using jamesnesbitt/wunder-mariadb

    To incorporate source, the source code from /app/source
    is mapped into a "source" container, which is used in
    the nginx and fpm containers.

    The Database is un-initialized, but an optional init
    build for a db has been included, and you can switch to
    it by removing the db node, and uncommenting the custom
    db node.

    All of the suggested images in this project are based on
    the wunder-base concept, which is used to provide a commong
    /app project folder, and similar users/OS, to keep access
    privileges working better.
    The builds are all CentOS7, EPEL and often REMI based builds.

    # Components

    ## Services

    ### LAMP

    This project offers a set of connected containers that provide
    the LAMP stack, with nginx. php7-fpm and mariadb10 each connected
    over tcp/ip

    ### Additional services

    Elasticsearch and Redis are also offered as standalone containers

    ### Developer tools

    There are numerous command nodes, which allow developers to
    run coach as a CLI to run commands such as composer, drush
    and the platformsh CLI.

    # Getting Started:

      You already did this:

        #/> coach init demo complete

      Now just do this:

        $/> coach up

      This should:

        - download some images
        - build any local images that were defined
        - create a source container which will map ./app/source to /app/www/active

        - start an nginx container, and fpm container and a db container

      You should then have

        - http access at host:8080, or directly on the container
        - the http should point to the source code in /app/source

    # Day to day use

    ## starting and stopping

        $/> coach stop
        $/> coach start

    ## starting a specific container

      - start a specific node

        $/> coach @www start

      - start all service nodes

        $/> coach %service start

    ## rebuild any containers

      1. stop any running containers

        $/> coach stop

      2. remove and created containers

        $/> coach remove

      3. recreate and containers

        $/> coach create

      4. start the new containers

        $/> coach start

    # Alterations that you should make

    ## Custom DB

    The nodes.yml file has a better DB image commented out which you could use to get
    a DB container that has an already populated DB with specific access credentials.

    ## Switch to PHP7 or HHVM

    If you want to test out the latest PHP7 or HHVM builds, try changing nodes.yml, the
    fpm node Image values.  There are instructions above the node.

    Note that if you want to swap out fpm containers, you will need to stop and remove
    both the fpm and nginx nodes, alter the nodes yml, and then start www and fpm again
    (you do not need to stop the db container.)

    Instructions:

    1. Make changes to your nodes.yml (change the fpm image)

    2. stop www and fpm

      $/> coach @fpm @www stop

    3. remove www and fpm containers

      $/> coach @fpm @www remove

    4. make sure that you have all needed images

      $/> coach pull
      $/> coach build

    5. re-create www and fpm containers

      $/> coach @fpm @www recreate

    6. restart www and fpm containers

      $/> coach @fpm @www start

#
# .coach configuration files
#

- Type: File
  Path: .coach/README.md
  Contents: |
    # .coach

    This folder keeps settings and scripts for use with coach.  This folder
    demarks the root of the project, and allows the coach CLI to be run at
    any child path.  The folder is usually kept next to a source tree in order
    to allow git separation, or encapsulation, where desired.

    ## configuring coach

    ### conf.yml

    Base coach configuration, defining the project name (used to name containers)
    , configure the docker client, add any custom paths that you may want to use
    and to declare initial tokens

    ### secrets/secrets/yml

    This YAML file contains additional tokens, loaded after the conf.yml tokens
    are added, to allow sensitive tokens to be kept out of any git repository.
    The file could be shared as an example.secrets.yml in repository.

    Not demonstrated in this demo, is that if you have a file in your home directory
    ~/.coach/secrets/secrets.yml, then those tokens are loaded after these tokens
    to allow user overrides.

    ### nodes.yml

    A map of nodes which coach will run.

    ### tools.yml

    A map of non-coach tools, usually scripts, that coach can try to run for you.

    This allows for running of scripts from anywhere in the project, and allows
    passing in coach tokens as ENV variables.

    This accomodates the need to allow simple scripting integration, where writing
    custom operations does not make sense.

    ### help.yml

    A map of custom help topics, that could be accessed using $/> coach help {token}

    ### docker/{build}

    An optional path that can be used to keep Docker builds that should be built
    automatically as a part of a node.  To use one of these, there must be a node
    that declares Build: docker/{build}

- Type: File
  Path: .coach/conf.yml
  Contents: |
    # Coach project conf
    #
    # Configurations for the coach project
    #
    # Project: project name, used to create container names
    # Author: used for docker commits & pushes.
    #   @note this needs to be valid for container names/images
    #     so it can contain alpha-numeric & "_"
    #
    # Tokens: a string map for string substitutions elsewhere
    #    by using the format %{key} in files loaded after this
    #    one
    #
    # Paths: a string map of paths that you can use for 
    #    things like docker builds and mounts.  Paths can be 
    #    absolute or relative to the project root.
    #    Note that you can override the following paths:
    #      - usertemplates : path to users init templates
    #      - usersecrets : path to user secrets
    #      - projectsecrets : path to project secrets
    #      - build : path to builds
    #    Paths are also made available as tokens using the
    #    format PATH_{UPPERCASEKEY}
    #

    # Project name
    Project: complete

    # if you are going to make docker commits, set this
    Author: my.email@docker.com

    # Do you use a remote docker service?
    #
    # @note that file binds don't work in remote docker
    # services, all of your images have to build source 
    # into the image.
    #
    #Docker:
    #  Host: "tcp://192.168.72.8:4243"

    # Some additional settings
    Settings:

      # this makes all user env variables available as tokens
      UseEnvVariablesAsTokens: TRUE

    # Custom Tokens
    Tokens:
      # A custom token that I may want to use inside the containers
      INTERNAL_PROJECT_ID: Akkare3Rqr3

      # these tokens may hold sensitive data, so maybe you should put them
      # into .coach/secrets/secrets.yml instead of here
      BLACKFIRE_SERVER_ID: "{ID}"             # Replace {ID} with your actual ID
      BLACKFIRE_SERVER_TOKEN: "{TOKEN}"       # Replace {TOKEN} with your actual token

      # Set a container domain, which containers can pull in as ENV or box domains
      CONTAINER_DOMAIN: demo.coach

- Type: File
  Path: .coach/nodes.yml
  Contents: |
    ###
    # Project nodes
    #
    # A string map of node configurations, each entry is a node, which 
    # corresponds to a set of containers based on a single image.  the
    # nodes have different types, an different purposes:
    #
    # Nodes: 
    #   Each element in the yml file is a keyed configuration to configure
    #   a single coach node, which is any number of docker containers
    #   that use a single build/image.  The nodes can be just used to 
    #   build images, or can be used to store data, run services or run
    #   commands.  A node can use multiple containers to provide scaling
    #   services, or alternate services.
    #
    # Types:
    #   - build: only used for building images, let's you build a base 
    #        image for other nodes
    #   - volume: non-running containers meant to hold files that are 
    #        shared with other nodes
    #   - service: a node with containers that get started and stopped
    #   - command: a node that uses disposable containers to run commands
    #        inside an environment
    #
    # Instances:
    #   Nodes can have multiple containers called instances. The instances
    #   setting tells coach how to treat the node instances:
    #   - scale: allow numeric instances, and allow the scale operation 
    #        to spin up new instanes.
    #   - fixed: if you provide a string list of instances, then they 
    #         can be started and stopped by name.
    #   - temporary: instances started are removed when stopped.  For example
    #         command containers are considered temporary.
    #
    #   Multiple instances are complex, especially when it comes to linking
    #   Nodes together.  If one node is linked to another, either by Link,
    #   or VolumesFrom, then coach tries to link matching instance names
    #   possible (or you can user node:all to link to all)
    #
    # Tokens:
    #
    #  Tokens can be used for string substitution in this file.  Tokens can come
    #  from the conf.yml, or from the secrets.yml (or from the users secrets.)
    #  Tokens are substituted using a "%" prefix, before the YML is parsed, so
    #  you may need to wrap tokenized settings in "quotes" when using them.
    #
    #  The following tokens are available:
    #
    #    - anything from the tokens section of the conf.yml
    #    - anything from the project or user secrets.yml
    #    
    #    - the project name is accessible using %PROJECT
    #    - any path value is accessible using %PATH_UPPERCASEPATHKEY
    #    - multi-instance nodes can access the intance name as %INSTANCE
    #
    # Coach configuration:
    #
    #   - Type: You can define the node type (or it will default to service)
    #   - Build: You can assign a Build path, which will be used to build a local
    #        image for the node.  If you also define an image then that
    #        is used for the image name.  If the path is relative, then it
    #        is considered relative inside the .coach/ folder.
    #   - Instances: a string list of instance names, or the keyword temporary
    #        or the keyword scaled, followed by the integer values for initial
    #        and maximum number of running containers
    #        e.g.:
    #           Instances: first second third
    #           Instances: temporary
    #           Instances: scaled 3 9
    #
    # Docker remote API Configurations:
    #
    #   The two principle parts of the configuration for a node are the 
    #   Config and Host settings.
    #   These wrap the client config and can use any of it's keys, which 
    #   gives access to pretty much all of the docker remote API settings.
    #
    #   - Config : the dockerclient config element used define the internals
    #        of a container.  
    #        https://github.com/fsouza/go-dockerclient/blob/master/container.go#L200
    #   - Host : the dockerclient config element used to define the relationship
    #        between the container and it's host.
    #        https://github.com/fsouza/go-dockerclient/blob/master/container.go#L472
    #
    ###

    ###
    # A volume container to deliver the web root as READ-ONLY
    #
    # Using a container to hold source, even if it just locally binded source, is
    # a good idea, because it replicates what a production service would do.  It would
    # have source copied/exported/retrieved in, and make it available in the same way
    #
    # The container has
    #  - www : the Read-Only web root (not yet read only)
    #  - assets : a Read-Write set of assets for the application
    #  - backup : a place for the application to dump archives and backups
    #
    # @note that the relational path between the bound paths remains the same
    #  inside the container as it is locally, which allows for relative sym-links
    #
    source:
      Type: volume

      Config:
        Image: jamesnesbitt/wunder-base # RUn from a standard base image
      Host:
        Binds:
          - "app/www:/app/www"       # map the application web root (@TODO this should be made RO)

    ###
    # A volume container to hold the web assets as READ-WRITE
    #
    # Using a container to hold source, even if it just locally binded source, is
    # a good idea, because it replicates what a production service would do.  It would
    # have source copied/exported/retrieved in, and make it available in the same way
    #
    # The container has
    #  - assets : a Read-Write set of assets for the application
    #  - backup : a place for the application to dump archives and backups
    #  - /app/www/asctive/files : will be used to demonstrate RW overlay
    #
    # @note that the relational path between the bound paths remains the same
    #  inside the container as it is locally, which allows for relative sym-links
    #
    assets:
      Type: volume

      Config:
        Image: jamesnesbitt/wunder-base # RUn from a standard base image
      Host:
        Binds:
          # you can flat include paths 
          - "app/assets:/app/assets" # map the application assets path
          - "app/backup:/app/backup" # map the application backup
          # you can overlay volumes from one container onto another, 
          # to get writeable on top of read only
          - "app/assets/files:app/www/active/files"

    ###
    # Key-Value storage service using redis
    #
    # This node creates a single service container running a redis instance
    #
    redis:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-redis
        RestartPolicy: on-failure

    ###
    # search service using elasticsearch
    #
    # This node creates a single elasticsearch instance
    #
    elasticsearch:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-elasticsearch
        RestartPolicy: on-failure

    ###
    # Database service
    #
    # This container uses a local build to extend a base db, adding in a database "app" and changing
    # the root user password
    # 
    # @see ./coach/docker/db/Dockerfile
    #
    # This node needs building !  $/> coach build
    #
    db:
      Type: service
      Build: /docker/db          # DB has a docker build so that we can create databases and set custom passwords.

      Config:
        RestartPolicy: on-failure
        OpenStdin: true

    ###
    # Blackfire service
    #
    # This node produces a blackfire service which can be used to relay
    # blackfire data to the blackfire internet service
    #
    # @note that your php-fpm needs to have the blackfire module installed
    #
    blackfire:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-blackfire
        RestartPolicy: on-failure

        Env:
          - "BLACKFIRE_SERVER_ID=%BLACKFIRE_SERVER_ID"
          - "BLACKFIRE_SERVER_TOKEN=%BLACKFIRE_SERVER_TOKEN"

    ###
    # FPM service
    #
    # This node implements a standard PHP-FPM service, which you can connect to over
    # TCP/IP.  The node has access to the source via the source container, and the db
    # using a docker link (accessible over TCP/IP at db.app)
    #
    # There are alternative PHP images that you could try, to test out HHVM or PHP
    # But note that if you switch, you have to recreate the container.
    #
    # Note that the WWW node needs this container
    #
    fpm:
      Type: service

      Config:
        #Image: jamesnesbitt/wunder-php56fpm    # The FPM works, and should have blackfire working
        Image: jamesnesbitt/wunder-php7fpm    # The FPM works, and should have blackfire working
        #Image: jamesnesbitt/wunder-hhvm    # The FPM works, and should have blackfire working

      Host:
        Links:
          - db:db.app                          # make the db container available
          - blackfire:blackfire.app            # make the blackfire container available
          - redis:redis.app                    # make the redis container available
          - elasticsearch:elasticsearch.app    # make the elasticsearch container available
        VolumesFrom:
          - "source:ro"                        # map in all volumes from the source container as read only
          - "assets"                           # map in all volumes from the assets container

    ###
    # WWW service
    #
    # An nginx service, that handles http requests, and passes PHP parsing off to 
    # the fpm node.  This node has some custom configurations to try to get it
    # to respond to different URLs appropriately
    #
    # @note that this container binds to the host port for 8080, but can still be 
    #   resolved by pointing to port 80 on the container IP
    # @note that if you are using DNSDOCK, the DNSDOCK_ALIAS will help you browser to the service
    # @note https is an option if you set up the image properly.
    #
    www:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-nginx  # recent nginx build using nginx provided centos repo
        Hostname: "%PROJECT" # Token derived from the project name in conf.yml
        Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
        Env:
          - "DNSDOCK_ALIAS=%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
        ExposedPorts:
          80/tcp: {}

      Host:
        Links:
          - fpm:fpm.app # make the fpm service available as fpm.app
        VolumesFrom:
          - "source:ro"                        # map in all volumes from the source container as read only
          - "assets"                           # map in all volumes from the assets container
        PortBindings:
          80/tcp:
            - HostPort: 8080 # map Port 80 to Host 8080 (applies to all Host IPs)

    ###
    #
    # DEVELOPER NODES
    #

    ###
    # Developer configuration and caches
    #
    # This is a volume container into which you can map files 
    # that are used to configure developer tools, but which you
    # may not want to have available in your www and fpm containers
    #
    dev:
      Type: volume

      Config:
        Image: jamesnesbitt/wunder-base # RUn from a standard base image
      Host:
        Binds:
          - ~/.ssh:/app/.ssh                          # use the host ssh keys
          - ~/.gitconfig:/app/.gitconfig              # use universal git settings
          - app/settings/console:/app/.console        # drupal console
          - app/settings/platformsh:/app/.platformsh  # platform SH CLI
          - .app/settings/drush:/app/.drush           # drush aliases and caching are kept in .coach/.drush  


    ####
    # Drush console
    #
    # A utility command container that you can use to run drush commands
    ##
    console:
      Disabled: false
      Type: command

      Config:
        Image: jamesnesbitt/wunder-developershell
        Entrypoint:
          - /app/project/repository/vendor/bin/console
          - "--ansi"
        WorkingDir: /app/project/repository/web
        Tty: true

      Host:
        Links:
          - db:db.app
          - blackfire:blackfire.app
          - redis:redis.app
          - elasticsearch:elasticsearch.app
        VolumesFrom:
          - "source:ro"
          - assets
          - dev

    ####
    # Drush command container
    #
    # A utility command container that you can use to run drush commands
    ##
    drush:
      Disabled: false
      Type: command

      Config:
        Image: jamesnesbitt/wunder-developershell
        Entrypoint:
          - /app/project/repository/vendor/bin/drush
        WorkingDir: /app/project/repository/web
        Tty: true

      Host:
        Links:
          - db:db.app
          - blackfire:blackfire.app
          - redis:redis.app
          - elasticsearch:elasticsearch.app
        VolumesFrom:
          - "source:ro"
          - assets
          - dev

    ####
    # PlatformSH CLI command container
    #
    # A utility command container that you can use to run platform cli commands
    ##
    platform:
      Disabled: false
      Type: command

      Config:
        Image: jamesnesbitt/wunder-developershell
        Entrypoint:
          - /app/.composer/vendor/bin/platform
        Cmd:
          - environments
        WorkingDir: /app/project/
        Tty: true

      Host:
        Env:
          - "PLATFORMSH_CLI_API_TOKEN:%PLATFORMSH_CLI_API_TOKEN"
        VolumesFrom:
          - "source:ro"
          - assets
          - dev
    ####
    # composer
    #
    # run the developershell image, but run composer
    # in the app/project/repository
    ##
    composer:
      Disabled: false
      Type: commmand

      Config:
        Image: jamesnesbitt/wunder-developershell
        WorkingDir: /app/project/repository
        Entrypoint:
          - /usr/local/bin/composer
        Tty: true

      Host:
        Links:
          - db:db.app
          - blackfire:blackfire.app
          - redis:redis.app
          - elasticsearch:elasticsearch.app
        VolumesFrom:
          - "source:ro"
          - assets
          - dev


    ####
    # Developer shell DON'T USE ME
    #
    # A ZSH shell with plenty of developer tools included
    #
    # @NOTE this shell doesn't work very well, which may be an issue with
    # the terminal implementation in the remote docker API
    ##
    shell:
      Disabled: false
      Type: commmand

      Config:
        Image: jamesnesbitt/wunder-developershell
        WorkingDir: /app/project
        Tty: true

      Host:
        Links:
          - db:db.app
        VolumesFrom:
          - "source:ro"
          - assets
          - dev

- Type: File
  Path: .coach/help.yml
  Contents: |
    ###
    # help.yml : project specific help handlers
    #
    # this file is a string:string map of help topics which 
    # can be used to help developers orient themselves with 
    # project specifics
    #
    # USAGE:
    #   $/> coach help {key}
    #
    #      shows the contents of the {key} topic
    #
    ###

    ###
    # Show help for the shell tool
    #
    #
    shell: |
      HELP: Script: shell

      The shell tool is a script based docker run, which often behaves 
      better than running terminal applications through the docker remote
      API.

      This script runs the jamesnesbitt/wunder-developershell image, and
      links to all needed services, and pulls volumes as needed.

      The image the runs a zsh shell, using the "app" user, to prevent any
      permission issues.

      USAGE:

          $/> coach tool shell

- Type: File
  Path: .coach/tools.yml
  Contents: |
    ###
    # tools.yml : project tools
    #
    # List tools, usually shell scripts, which coach can run.
    #
    # Using coach to run scripts has 2 advantages:
    #  1. you can run coach in any subfolder of the project
    #  2. you can pass tokens to the script as ENV variables
    #
    # @NOTE that you can have tools for a user in ~/.coach/tools.yml
    #
    ###

    ###
    # shell run
    #
    # This tool runs docker as a shell script, which gives better ansi
    # behaviour than running it through the remote docker API.
    # Running the script as a tool allows passing of token information
    # to the script.
    #
    # @note this script is a bit hackish, but works quite well
    #
    shell:
    # This tool is a script
        Type: script

        Script: 
    # use this as the tool script
          - "sh"
          - ".coach/tools/shell"

        ENV:
    # Set what image is used for the shell
          - "IMAGE=jamesnesbitt/wunder-developershell"
    # DEFINE some vars that get used to create container names
          - "PROJECT_NAME=%PROJECT"
          - "PROJECT_INSTANCE=single"
    # Give some usefull paths in case the script needs them
          - "PROJECT_ROOT=%PATH_PROJECTROOT"
          - "COACH_ROOT=%PATH_PROJECTCOACH"
    # DEFINE what nodes to link to
          - "LINKS=fpm blackfire elasticsearch redis www db"
    # DEFINE what nodes to mount from
          - "VOLUMESFROM=source dev"
    # DEFINE what env variables to set inside the shell
          - "USE_ENVS=PROJECT_NAME PLATFORMSH_CLI_API_TOKEN BLACKFIRE_SERVER_ID BLACKFIRE_SERVER_TOKEN"
    # Now makes sure that those env vars can be found
          - "PLATFORMSH_CLI_API_TOKEN=%PLATFORMSH_CLI_API_TOKEN"
          - "BLACKFIRE_SERVER_ID=%BLACKFIRE_SERVER_ID"
          - "BLACKFIRE_SERVER_TOKEN=%BLACKFIRE_SERVER_TOKEN"

- Type: File
  Path: .coach/secrets/secrets.yml
  Contents: |
    # SECRET TOKENS
    #
    # Into this file, you should put tokens that may container 
    # sensitive data, that you'd like to keep out of your project
    # repository.
    #
    # @NOTE add this file to your .gitignore
    #
    PLATFORMSH_CLI_API_TOKEN: "{TOKEN}"
    BLACKFIRE_SERVER_ID: "{ID}"
    BLACKFIRE_SERVER_TOKEN: "{TOKEN}"

- Type: File
  Path: .coach/docker/README.md
  Contents: |
    # .coach/docker

    An arbitrary place the we put custom Docker builds for the project.

    These custom builds are often small overrides of factory images used 
    to make alterations, or to add content.

    If a node has a "Build: {path}" declaration, then a custom build should
    be placed in .coach/{path}/Dockerfile. As a standard we have been using
    .coach/docker/{build}/Dockerfile for that "Build: docker/{build}"

- Type: File
  Path: .coach/docker/db/README.md
  Contents: |
    # DB Docker Build

    This is a Docker build that can optionally be used for building a custom Database
    image for the local project.

    To use this build, add "docker/db" (the path inside the .coach folder) to an node,
    and then you can use "$/> docker build" to build all node images

- Type: File
  Path: .coach/docker/db/Dockerfile
  Contents: |
    FROM        jamesnesbitt/wunder-mariadb
    MAINTAINER  james.nesbitt@wunderkraut.com

    ### ProjectDB --------------------------------------------------------------------


    # Create our project DB
    #
    # - set the root user password to something safe (considered a good idea)
    # - create an "app" database
    # - give access to the new database to an "app" user using the password "app"
    # - app user can only access from 172.* IPs !!!! (inside the docker subnet)
    # - flush access
    #
    RUN (/usr/bin/mysqld_safe &) && sleep 5 && \
        mysql -uroot -e "UPDATE mysql.user SET Password=PASSWORD('H4x0r') WHERE User='root'" && \
        mysql -uroot -e "CREATE DATABASE app" && \
        mysql -uroot -e "GRANT ALL ON app.* to app@'172.%' IDENTIFIED BY 'app'" && \
        mysql -uroot -e "FLUSH PRIVILEGES"

    ### /ProjectDB -------------------------------------------------------------------

#
# Application files
#

- Type: File
  Path: app/README.md
  Contents: |
    # /app

    The /app folder is a central place into which to put all of your
    Application specific source code, configurations and assets, in
    such a manner that this folder can be a distribution target for 
    an application (keep this in git.)
    Think of this path as being the root of your actualy project,
    wheras the parent could be considered the root of the coach
    implementation.  /app should be something that could work no 
    matter which tool was being used to manage the project.

    If your project is generally a .coach folder, then you can also 
    keep that path in the same repository, but it is not compulsory.

    ## /app/source

    An example of where you could put revisionable source code
    for your project.  This source code could just be put into 
    the /app/www folder, but in many cases projects have a more
    complicated build process, which might convert the source into
    the web root.

    This source code often does not need to be directly mounted into
    any of the containers, whereas the www/active folder is usually
    the nginx/fpm web root.

    ## /app/www

    The final web root to be used by most of the containers.

    This gives a source build destination, as a subfolder to 
    a bound path, which can be deleted, copied and moved as a
    part of any source build process.

    This separates writeable source into elements that an be
    considered read-only, which are used in the nginx and 
    fpm service.

    The typical nginx approach used is to not target directly
    the /app/www path, as the source code may need to be 
    repeatedly built/compiled from source, and often the build
    process moves or deletes it's root path.  For this reason
    we typically use app/www/active as the web-root, and mount
    /app/www into any containers, to prevent difficulties with
    deleted binds etc.

    ## /app/source

    This folder contains any source files and scripts which 
    you may use to build your www path.
    The build process may be run outside of the coach containers
    (in which case there is no need to map it in) or it can
    be mapped in, only to containers that build source.


    ## /app/assets

    This mapped folder contains all writeable assets that need
    to be integrated into your application. This folder allows
    us to mount the www folder as read-only, in served cases,
    for extra security


    ## /app/backup

    An additional writeable path, into which the application
    could archive and backup data.

    Backup can be a target for manuall archivng, but it should be
    considered a part of any sysadmin tools, and should be used
    for scheduled and other automated backups.

    ## /app/settings

    A place to put developer, or sysadmin configurations that may
    get mapped into command containers, or used in specific
    situations.

- Type: File
  Path: app/settings/README.md
  Contents: |
    # /app/settings

    This path contains folders that be volume targets for configurations, typically
    only used in developer or sysadmin cases.

    This provides distributable application configuration as a part of your app,
    but keeps the files out of the source code, and not-mounted when they are not
    needed.

- Type: File
  Path: app/settings/console/.gitkeep
  Content: |
    .gitkeep

- Type: File
  Path: app/settings/drush/.gitkeep
  Content: |
    .gitkeep

- Type: File
  Path: app/settings/platformsh/.gitkeep
  Content: |
    .gitkeep

# Copy user git settings to the project settings
- Type: FileCopy
  Path: app/settings/git
  Source: ~/.git

# Check out a git copy of the project source
- Type: GitClone
  Path: app/source
  Url: https://github.com/drupal/drupal.git

- Type: File
  Path: app/www/active/index.php-fpm
  Contents: |
    <?php
    /**
     * Put your Web Root here
     *
     * This is just a placeholder that will show you if
     * your web-root is properly setup up and connected
     */

    phpinfo();

- Type: File
  Path: app/www/active/renderable/.gitkeep
  Contents: |
    .gitkeep

- Type: File
  Path: app/assets/files/.gitkeep
  Contents: |
    .gitkeep

- Type: File
  Path: app/backup/.gitkeep
  Contents: |
    .gitkeep
