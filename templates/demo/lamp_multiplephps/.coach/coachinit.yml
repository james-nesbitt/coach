- Type: File
  Path: README.md
  Contents: |
    # COACH DEMO: Lamp with multiple PHP backends

    This coach demo provides an enhanced LAMP stack:

    - DB service using jamesnesbitt/wunder-mariadb

    - 3 fpm services, that connect a standard to a different
      php version.  All php versions point to the same DB
      container, and use a separate nginx host.
        - php56fpm : from centos REMI
        - php7fpm : from REMI-7
        - hhvm : from EPEL I think

    - 1 master nginx server that has three server{} settings
      to point to each of the PHP FPMs using wildcarded URLS
        - php56.* -> the php56 fpm server
        - php7.* -> the php7 fpm server
        - hhvm.* -> the hhvm server

    @NOTE you may have to do some DNS/hosts magic to get these
    DNS entries to resolve

    This should produce 3 parrallel nginx services that
    all point to the same source, which can be used for
    parrallel testing.

    To incorporate source, the source code from /app/source
    is mapped into a "source" container, which is used in
    the nginx and fpm containers.

    The Database is un-initialized, but an optional init
    build for a db has been included, and you can switch to
    it by removing the db node, and uncommenting the custom
    db node.

    All of the suggested images in this project are based on
    the wunder-base concept, which is used to provide a commong
    /app project folder, and similar users/OS, to keep access
    privileges working better.
    The builds are all CentOS7, EPEL and often REMI based builds.

    # Getting Started:

      You already did this:

        #/> coach init demo lamp_multiplephp

      Now just do this:

        $/> coach up

      This should:

        - download some images
        - build any local images that were defined
        - create a source container which will map ./app/source to /app/www/active

        - start nginx containers, and fpm containers and a db container

      You can access the different http servers directly, or set
      different port numbers for each

    # Day to day use

    ## starting and stopping

        $/> coach stop
        $/> coach start

    ## coach targets

      You can target coach at only certain nodes using targets

        $/> coach @www stop

        $/> coach @php56 @php7 @hhvm start

    ## rebuild any containers

      1. stop any running containers

        $/> coach stop

      2. remove and created containers

        $/> coach remove

      3. recreate and containers

        $/> coach create

      4. start the new containers

        $/> coach start


- Type: File
  Path: .coach/conf.yml
  Contents: |
    # Coach project conf
    #
    # Configurations for the coach project
    #
    # Project: project name, used to create container names
    # Author: used for docker commits & pushes.
    #   @note this needs to be valid for container names/images
    #     so it can contain alpha-numeric & "_"
    #
    # Tokens: a string map for string substitutions elsewhere
    #    by using the format %{key} in files loaded after this
    #    one
    #
    ###

    # Project name
    Project: lampphptests

    Author: me

    # Custom Tokens
    Tokens:
      # Set a container domain, which containers can pull in as ENV or box domains
      CONTAINER_DOMAIN: demo.coach


- Type: File
  Path: .coach/nodes.yml
  Contents: |
    ###
    # Project nodes
    #
    # A string map of node configurations, each entry is a node, which 
    # corresponds to a set of containers based on a single image.  the
    # nodes have different types, an different purposes:
    #
    ###

    ###
    # A volume container to hold source
    #
    # Using a conmtainer to hold source, even if it just locally binded source, is
    # a good idea, because it replicates what a production service would do.  It would
    # have source copied/exported/retrieved in, and make it available in the same way
    #
    source:
      Type: volume

      Config:
        Image: jamesnesbitt/wunder-base # RUn from a standard base image
      Host:
        Binds:
          - "app/source:/app/www/active" # map the local source folder, into where the nginx/fpm expect the web root

    ###
    # Database service
    #
    # This container is a base DB image with no existing DB, nor access.  Consider 
    # using a local build, to extend a base DB image, adding in a db, adding a user
    # and setting exactly what access credentials that you want
    #
    db:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-mariadb  # this base db image has no running db, user, access yet

    ###
    # FPM services
    #
    # # services are created in parrallel
    #    - php56 : from REMI
    #    - php7 : from REMI-7
    #    - hhvm : from .. EPEL I think
    #
    # Each node implements a standard PHP-FPM service, which you can connect to over
    # TCP/IP.  Each node has access to the source via the source container, and the db
    # using a docker link (accessible over TCP/IP at db.app)
    #
    hhvm:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-hhvm      # The HHVM works

      Host:
        Links:
          - db:db.app # make the db container available as db.app
        VolumesFrom:
          - source  # map in all volumes from the source container

    php56:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-php56fpm     # The FPM works, and should have blackfire working

      Host:
        Links:
          - db:db.app # make the db container available as db.app
        VolumesFrom:
          - source  # map in all volumes from the source container

    php7:
      Type: service

      Config:
        Image: jamesnesbitt/wunder-php7fpm     # The FPM delivers the latest PHP7

      Host:
        Links:
          - db:db.app # make the db container available as db.app
        VolumesFrom:
          - source  # map in all volumes from the source container

    ###
    # WWW service
    #
    # An nginx service, that handles http requests, and passes PHP parsing off to 
    # the fpm node.  This node has some custom configurations to try to get it
    # to respond to different URLs appropriately
    #
    # This nginx server handles URLS as follows:
    #   php56.* => goes to the php56 fpm
    #   php7.* => goes to the php7 fpm
    #   hhvm.* => goes to the hhvm fpm
    #
    # @note you may need to do some DNS magic to get your machine to point to
    #  the www container for all three URLs, but that is your business.
    #
    # @note that this container binds to the host port for 8080, but can still be 
    #   resolved by pointing to port 80 on the container IP
    # @note that if you are using DNSDOCK, the DNSDOCK_ALIAS will help you browser to the service
    # @note https is an option if you set up the image properly.
    #
    www:
      Type: service
      Build: docker/nginx # We need a custom nginx build to handler multiple URLS and multiple FPMs

      Config:
        Hostname: "%PROJECT" # Token derived from the project name in conf.yml
        Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
        Env:
          - "DNSDOCK_ALIAS=%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
        ExposedPorts:
          80/tcp: {}

      Host:
        Links:
          - php56:php56.fpm.app # make the fpm service available as fpm.app
          - php7:php7.fpm.app # make the fpm service available as fpm.app
          - hhvm:hhvm.fpm.app # make the fpm service available as fpm.app
        VolumesFrom:
          - source  # map in all volumes from the source container
    #     PortBindings:
    #       80/tcp:
    #         - HostPort: 8080 # Port 80 applies to all Host IPs


- Type: File
  Path: app/README.md
  Contents: |
    # DEMO lamp : multiple PHP options

      Test your project with various PHP backends
        - PHP56
        - PHP7
        - HHVM

    ## /app/source

      Project source-code and assets path

- Type: File
  Path: app/source/index.php
  Contents: |
    <?php
    /**
     * Put your PHP source code here
     *
     * Not that in this demo project, only this folder gets mapped into
     * the source container, so relative includes that point above will
     * fail.  You can change the source node bind as needed.
     */

    phpinfo();

- Type: File
  Path: .coach/docker/nginx/README.md
  Contents: |
    # custom nginx build

    This demo uses a custom nginx build, which overrides the default.conf
    nginx conf, to allow for 3 server{} listeners, 1 for each fpm service.


- Type: File
  Path: .coach/docker/nginx/Dockerfile
  Contents: |
    FROM        jamesnesbitt/wunder-nginx
    MAINTAINER  james.nesbitt@wunderkraut.com

    ### NGINX --------------------------------------------------------------------

    # Use new nginx vhost confs
    #
    # This new conf send connections to one of three fpm servers
    #
    ADD etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf

    ### /NGINX -------------------------------------------------------------------

- Type: File
  Path: .coach/docker/nginx/etc/nginx/conf.d/default.conf
  Contents: |
    # PHP56 Server
    server {
      listen       80;
      server_name  php56.*;
      root /app/www/active;

      error_log /app/log/nginx/php56.error.log;
      access_log /app/log/nginx/php56.access.log;

      charset utf8;

      gzip_static on;

      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      location ~ \..*/.*\.php$ {
        return 403;
      }

      # No no for private
      location ~ ^/sites/.*/private/ {
        return 403;
      }

      # Block access to "hidden" files and directories whose names begin with a
      # period. This includes directories used by version control systems such
      # as Subversion or Git to store control files.
      location ~ (^|/)\. {
        return 403;
      }

      location / {
        # This is cool because no php is touched for static content
        try_files $uri @rewrite;
      }

      location @rewrite {
        rewrite ^ /index.php;
      }

      location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass php56.fpm.app:9000;
      }

      # Fighting with Styles? This little gem is amazing.
      location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
      }

      location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
      }
    }

    # PHP7 Server
    server {
      listen       80;
      server_name  php7.*;
      root /app/www/active;

      error_log /app/log/nginx/php7.error.log;
      access_log /app/log/nginx/php7.access.log;

      charset utf8;

      gzip_static on;

      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      location ~ \..*/.*\.php$ {
        return 403;
      }

      # No no for private
      location ~ ^/sites/.*/private/ {
        return 403;
      }

      # Block access to "hidden" files and directories whose names begin with a
      # period. This includes directories used by version control systems such
      # as Subversion or Git to store control files.
      location ~ (^|/)\. {
        return 403;
      }

      location / {
        # This is cool because no php is touched for static content
        try_files $uri @rewrite;
      }

      location @rewrite {
        rewrite ^ /index.php;
      }

      location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass php7.fpm.app:9000;
      }

      # Fighting with Styles? This little gem is amazing.
      location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
      }

      location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
      }
    }

    # HHVM Server
    server {
      listen       80;
      server_name  hhvm.*;
      root /app/www/active;

      error_log /app/log/nginx/hhvm.error.log;
      access_log /app/log/nginx/hhvm.access.log;

      charset utf8;

      gzip_static on;

      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      location ~ \..*/.*\.php$ {
        return 403;
      }

      # No no for private
      location ~ ^/sites/.*/private/ {
        return 403;
      }

      # Block access to "hidden" files and directories whose names begin with a
      # period. This includes directories used by version control systems such
      # as Subversion or Git to store control files.
      location ~ (^|/)\. {
        return 403;
      }

      location / {
        # This is cool because no php is touched for static content
        try_files $uri @rewrite;
      }

      location @rewrite {
        rewrite ^ /index.php;
      }

      location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass hhvm.fpm.app:9000;
      }

      # Fighting with Styles? This little gem is amazing.
      location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
      }

      location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
      }
    }
