###
# tools.yml : project tools
#
# List tools, usually shell scripts, which coach can run.
#
# Using coach to run scripts has 2 advantages:
#  1. you can run coach in any subfolder of the project
#  2. you can pass tokens to the script as ENV variables
#
# @NOTE that you can have tools for a user in ~/.coach/tools.yml
#
###

###
# shell run
#
# This tool runs docker as a shell script, which gives better ansi
# behaviour than running it through the remote docker API.
# Running the script as a tool allows passing of token information
# to the script.
#
# @note this script is a bit hackish, but works quite well
#
shell:
# This tool is a script
    Type: script

    Script: 
# use this as the tool script
      - "sh"
      - ".coach/tools/shell"

    ENV:
# Set what image is used for the shell
      - "IMAGE=jamesnesbitt/wunder-developershell"
# DEFINE some vars that get used to create container names
      - "PROJECT_NAME=%PROJECT"
      - "PROJECT_INSTANCE=single"
# Give some usefull paths in case the script needs them
      - "PROJECT_ROOT=%PATH_PROJECTROOT"
      - "COACH_ROOT=%PATH_PROJECTCOACH"
# DEFINE what nodes to link to
      - "LINKS=fpm blackfire elasticsearch redis www db"
# DEFINE what nodes to mount from
      - "VOLUMESFROM=source dev"
# DEFINE what env variables to set inside the shell
      - "USE_ENVS=PROJECT_NAME PLATFORMSH_CLI_API_TOKEN BLACKFIRE_SERVER_ID BLACKFIRE_SERVER_TOKEN"
# Now makes sure that those env vars can be found
      - "PLATFORMSH_CLI_API_TOKEN=%PLATFORMSH_CLI_API_TOKEN"
      - "BLACKFIRE_SERVER_ID=%BLACKFIRE_SERVER_ID"
      - "BLACKFIRE_SERVER_TOKEN=%BLACKFIRE_SERVER_TOKEN"
