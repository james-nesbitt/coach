###
# Project nodes
#
# A string map of node configurations, each entry is a node, which 
# corresponds to a set of containers based on a single image.  the
# nodes have different types, an different purposes:
#
# Nodes: 
#   Each element in the yml file is a keyed configuration to configure
#   a single coach node, which is any number of docker containers
#   that use a single build/image.  The nodes can be just used to 
#   build images, or can be used to store data, run services or run
#   commands.  A node can use multiple containers to provide scaling
#   services, or alternate services.
#
# Types:
#   - build: only used for building images, let's you build a base 
#        image for other nodes
#   - volume: non-running containers meant to hold files that are 
#        shared with other nodes
#   - service: a node with containers that get started and stopped
#   - command: a node that uses disposable containers to run commands
#        inside an environment
#
# Instances:
#   Nodes can have multiple containers called instances. The instances
#   setting tells coach how to treat the node instances:
#   - scale: allow numeric instances, and allow the scale operation 
#        to spin up new instanes.
#   - fixed: if you provide a string list of instances, then they 
#         can be started and stopped by name.
#   - temporary: instances started are removed when stopped.  For example
#         command containers are considered temporary.
#
#   Multiple instances are complex, especially when it comes to linking
#   Nodes together.  If one node is linked to another, either by Link,
#   or VolumesFrom, then coach tries to link matching instance names
#   possible (or you can user node:all to link to all)
#
# Tokens:
#
#  Tokens can be used for string substitution in this file.  Tokens can come
#  from the conf.yml, or from the secrets.yml (or from the users secrets.)
#  Tokens are substituted using a "%" prefix, before the YML is parsed, so
#  you may need to wrap tokenized settings in "quotes" when using them.
#
#  The following tokens are available:
#
#    - anything from the tokens section of the conf.yml
#    - anything from the project or user secrets.yml
#    
#    - the project name is accessible using %PROJECT
#    - any path value is accessible using %PATH_UPPERCASEPATHKEY
#    - multi-instance nodes can access the intance name as %INSTANCE
#
# Coach configuration:
#
#   - Type: You can define the node type (or it will default to service)
#   - Build: You can assign a Build path, which will be used to build a local
#        image for the node.  If you also define an image then that
#        is used for the image name.  If the path is relative, then it
#        is considered relative inside the .coach/ folder.
#   - Instances: a string list of instance names, or the keyword temporary
#        or the keyword scaled, followed by the integer values for initial
#        and maximum number of running containers
#        e.g.:
#           Instances: first second third
#           Instances: temporary
#           Instances: scaled 3 9
#
# Docker remote API Configurations:
#
#   The two principle parts of the configuration for a node are the 
#   Config and Host settings.
#   These wrap the client config and can use any of it's keys, which 
#   gives access to pretty much all of the docker remote API settings.
#
#   - Config : the dockerclient config element used define the internals
#        of a container.  
#        https://github.com/fsouza/go-dockerclient/blob/master/container.go#L200
#   - Host : the dockerclient config element used to define the relationship
#        between the container and it's host.
#        https://github.com/fsouza/go-dockerclient/blob/master/container.go#L472
#
###

###
# A volume container to deliver the web root as READ-ONLY
#
# Using a container to hold source, even if it just locally binded source, is
# a good idea, because it replicates what a production service would do.  It would
# have source copied/exported/retrieved in, and make it available in the same way
#
# The container has
#  - www : the Read-Only web root (not yet read only)
#  - assets : a Read-Write set of assets for the application
#  - backup : a place for the application to dump archives and backups
#
# @note that the relational path between the bound paths remains the same
#  inside the container as it is locally, which allows for relative sym-links
#
source:
  Type: volume

  Config:
    Image: jamesnesbitt/wunder-base # RUn from a standard base image
  Host:
    Binds:
      - "app/www:/app/www"       # map the application web root (@TODO this should be made RO)

###
# A volume container to hold the web assets as READ-WRITE
#
# Using a container to hold source, even if it just locally binded source, is
# a good idea, because it replicates what a production service would do.  It would
# have source copied/exported/retrieved in, and make it available in the same way
#
# The container has
#  - assets : a Read-Write set of assets for the application
#  - backup : a place for the application to dump archives and backups
#  - /app/www/asctive/files : will be used to demonstrate RW overlay
#
# @note that the relational path between the bound paths remains the same
#  inside the container as it is locally, which allows for relative sym-links
#
assets:
  Type: volume

  Config:
    Image: jamesnesbitt/wunder-base # RUn from a standard base image
  Host:
    Binds:
      # you can flat include paths 
      - "app/assets:/app/assets" # map the application assets path
      - "app/backup:/app/backup" # map the application backup
      # you can overlay volumes from one container onto another, 
      # to get writeable on top of read only
      - "app/assets/files:app/www/active/files"

###
# Key-Value storage service using redis
#
# This node creates a single service container running a redis instance
#
redis:
  Type: service

  Config:
    Image: jamesnesbitt/wunder-redis
    RestartPolicy: on-failure

###
# search service using elasticsearch
#
# This node creates a single elasticsearch instance
#
elasticsearch:
  Type: service

  Config:
    Image: jamesnesbitt/wunder-elasticsearch
    RestartPolicy: on-failure

###
# Database service
#
# This container uses a local build to extend a base db, adding in a database "app" and changing
# the root user password
# 
# @see ./coach/docker/db/Dockerfile
#
# This node needs building !  $/> coach build
#
db:
  Type: service
  Build: /docker/db          # DB has a docker build so that we can create databases and set custom passwords.

  Config:
    RestartPolicy: on-failure
    OpenStdin: true

###
# Blackfire service
#
# This node produces a blackfire service which can be used to relay
# blackfire data to the blackfire internet service
#
# @note that your php-fpm needs to have the blackfire module installed
#
blackfire:
  Type: service

  Config:
    Image: jamesnesbitt/wunder-blackfire
    RestartPolicy: on-failure

    Env:
      - "BLACKFIRE_SERVER_ID=%BLACKFIRE_SERVER_ID"
      - "BLACKFIRE_SERVER_TOKEN=%BLACKFIRE_SERVER_TOKEN"

###
# FPM service
#
# This node implements a standard PHP-FPM service, which you can connect to over
# TCP/IP.  The node has access to the source via the source container, and the db
# using a docker link (accessible over TCP/IP at db.app)
#
# There are alternative PHP images that you could try, to test out HHVM or PHP
# But note that if you switch, you have to recreate the container.
#
# Note that the WWW node needs this container
#
fpm:
  Type: service

  Config:
    #Image: jamesnesbitt/wunder-php56fpm    # The FPM works, and should have blackfire working
    Image: jamesnesbitt/wunder-php7fpm    # The FPM works, and should have blackfire working
    #Image: jamesnesbitt/wunder-hhvm    # The FPM works, and should have blackfire working

  Host:
    Links:
      - db:db.app                          # make the db container available
      - blackfire:blackfire.app            # make the blackfire container available
      - redis:redis.app                    # make the redis container available
      - elasticsearch:elasticsearch.app    # make the elasticsearch container available
    VolumesFrom:
      - "source:ro"                        # map in all volumes from the source container as read only
      - "assets"                           # map in all volumes from the assets container

###
# WWW service
#
# An nginx service, that handles http requests, and passes PHP parsing off to 
# the fpm node.  This node has some custom configurations to try to get it
# to respond to different URLs appropriately
#
# @note that this container binds to the host port for 8080, but can still be 
#   resolved by pointing to port 80 on the container IP
# @note that if you are using DNSDOCK, the DNSDOCK_ALIAS will help you browser to the service
# @note https is an option if you set up the image properly.
#
www:
  Type: service

  Config:
    Image: jamesnesbitt/wunder-nginx  # recent nginx build using nginx provided centos repo
    Hostname: "%PROJECT" # Token derived from the project name in conf.yml
    Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
    Env:
      - "DNSDOCK_ALIAS=%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
    ExposedPorts:
      80/tcp: {}

  Host:
    Links:
      - fpm:fpm.app # make the fpm service available as fpm.app
    VolumesFrom:
      - "source:ro"                        # map in all volumes from the source container as read only
      - "assets"                           # map in all volumes from the assets container
    PortBindings:
      80/tcp:
        - HostPort: 8080 # map Port 80 to Host 8080 (applies to all Host IPs)

###
#
# DEVELOPER NODES
#

###
# Developer configuration and caches
#
# This is a volume container into which you can map files 
# that are used to configure developer tools, but which you
# may not want to have available in your www and fpm containers
#
dev:
  Type: volume

  Config:
    Image: jamesnesbitt/wunder-base # RUn from a standard base image
  Host:
    Binds:
      - ~/.ssh:/app/.ssh                          # use the host ssh keys
      - ~/.gitconfig:/app/.gitconfig              # use universal git settings
      - app/settings/console:/app/.console        # drupal console
      - app/settings/platformsh:/app/.platformsh  # platform SH CLI
      - .app/settings/drush:/app/.drush           # drush aliases and caching are kept in .coach/.drush  


####
# Drush console
#
# A utility command container that you can use to run drush commands
##
console:
  Disabled: false
  Type: command

  Config:
    Image: jamesnesbitt/wunder-developershell
    Entrypoint:
      - /app/project/repository/vendor/bin/console
      - "--ansi"
    WorkingDir: /app/project/repository/web
    Tty: true

  Host:
    Links:
      - db:db.app
      - blackfire:blackfire.app
      - redis:redis.app
      - elasticsearch:elasticsearch.app
    VolumesFrom:
      - "source:ro"
      - assets
      - dev

####
# Drush command container
#
# A utility command container that you can use to run drush commands
##
drush:
  Disabled: false
  Type: command

  Config:
    Image: jamesnesbitt/wunder-developershell
    Entrypoint:
      - /app/project/repository/vendor/bin/drush
    WorkingDir: /app/project/repository/web
    Tty: true

  Host:
    Links:
      - db:db.app
      - blackfire:blackfire.app
      - redis:redis.app
      - elasticsearch:elasticsearch.app
    VolumesFrom:
      - "source:ro"
      - assets
      - dev

####
# PlatformSH CLI command container
#
# A utility command container that you can use to run platform cli commands
##
platform:
  Disabled: false
  Type: command

  Config:
    Image: jamesnesbitt/wunder-developershell
    Entrypoint:
      - /app/.composer/vendor/bin/platform
    Cmd:
      - environments
    WorkingDir: /app/project/
    Tty: true

  Host:
    Env:
      - "PLATFORMSH_CLI_API_TOKEN:%PLATFORMSH_CLI_API_TOKEN"
    VolumesFrom:
      - "source:ro"
      - assets
      - dev
####
# composer
#
# run the developershell image, but run composer
# in the app/project/repository
##
composer:
  Disabled: false
  Type: commmand

  Config:
    Image: jamesnesbitt/wunder-developershell
    WorkingDir: /app/project/repository
    Entrypoint:
      - /usr/local/bin/composer
    Tty: true

  Host:
    Links:
      - db:db.app
      - blackfire:blackfire.app
      - redis:redis.app
      - elasticsearch:elasticsearch.app
    VolumesFrom:
      - "source:ro"
      - assets
      - dev


####
# Developer shell DON'T USE ME
#
# A ZSH shell with plenty of developer tools included
#
# @NOTE this shell doesn't work very well, which may be an issue with
# the terminal implementation in the remote docker API
##
shell:
  Disabled: false
  Type: commmand

  Config:
    Image: jamesnesbitt/wunder-developershell
    WorkingDir: /app/project
    Tty: true

  Host:
    Links:
      - db:db.app
    VolumesFrom:
      - "source:ro"
      - assets
      - dev
