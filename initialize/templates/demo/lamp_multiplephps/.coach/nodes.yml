###
# Project nodes
#
# A string map of node configurations, each entry is a node, which 
# corresponds to a set of containers based on a single image.  the
# nodes have different types, an different purposes:
#
###

###
# A volume container to hold source
#
# Using a conmtainer to hold source, even if it just locally binded source, is
# a good idea, because it replicates what a production service would do.  It would
# have source copied/exported/retrieved in, and make it available in the same way
#
source:
  Type: volume

  Docker:
    Config:
      Image: jamesnesbitt/wunder-base # RUn from a standard base image
    Host:
      Binds:
        - "app/source:/app/www/active" # map the local source folder, into where the nginx/fpm expect the web root

###
# Database service
#
# This container is a base DB image with no existing DB, nor access.  Consider 
# using a local build, to extend a base DB image, adding in a db, adding a user
# and setting exactly what access credentials that you want
#
db:
  Type: service

  Docker:
    Config:
      Image: jamesnesbitt/wunder-mariadb  # this base db image has no running db, user, access yet

###
# FPM services
#
# # services are created in parrallel
#    - php56 : from REMI
#    - php7 : from REMI-7
#    - hhvm : from .. EPEL I think
#
# Each node implements a standard PHP-FPM service, which you can connect to over
# TCP/IP.  Each node has access to the source via the source container, and the db
# using a docker link (accessible over TCP/IP at db.app)
#
hhvm:
  Type: service

  Docker:
    Config:
      Image: jamesnesbitt/wunder-hhvm      # The HHVM works

    Host:
      Links:
        - db:db.app # make the db container available as db.app
      VolumesFrom:
        - source  # map in all volumes from the source container

php56:
  Type: service

  Docker:
    Config:
      Image: jamesnesbitt/wunder-php56fpm     # The FPM works, and should have blackfire working

    Host:
      Links:
        - db:db.app # make the db container available as db.app
      VolumesFrom:
        - source  # map in all volumes from the source container

php7:
  Type: service

  Docker:
    Config:
      Image: jamesnesbitt/wunder-php7fpm     # The FPM delivers the latest PHP7

    Host:
      Links:
        - db:db.app # make the db container available as db.app
      VolumesFrom:
        - source  # map in all volumes from the source container

###
# WWW service
#
# An nginx service, that handles http requests, and passes PHP parsing off to 
# the fpm node.  This node has some custom configurations to try to get it
# to respond to different URLs appropriately
#
# This nginx server handles URLS as follows:
#   php56.* => goes to the php56 fpm
#   php7.* => goes to the php7 fpm
#   hhvm.* => goes to the hhvm fpm
#
# @note you may need to do some DNS magic to get your machine to point to
#  the www container for all three URLs, but that is your business.
#
# @note that this container binds to the host port for 8080, but can still be 
#   resolved by pointing to port 80 on the container IP
# @note that if you are using DNSDOCK, the DNSDOCK_ALIAS will help you browser to the service
# @note https is an option if you set up the image properly.
#
www:
  Type: service

  Docker:
    Build: docker/nginx # We need a custom nginx build to handler multiple URLS and multiple FPMs

    Config:
      Hostname: "%PROJECT" # Token derived from the project name in conf.yml
      Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
      Env:
        - "DNSDOCK_ALIAS=%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
      ExposedPorts:
        80/tcp: {}

    Host:
      Links:
        - php56:php56.fpm.app # make the fpm service available as fpm.app
        - php7:php7.fpm.app # make the fpm service available as fpm.app
        - hhvm:hhvm.fpm.app # make the fpm service available as fpm.app
      VolumesFrom:
        - source  # map in all volumes from the source container
      PortBindings:
        80/tcp:
          - HostPort: 8080 # Port 8080 applies to all Host IPs
