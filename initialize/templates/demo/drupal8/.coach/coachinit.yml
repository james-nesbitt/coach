- Type: File
  Path: README.md
  Contents: |
    # COACH DEMO: Drupal8 w/ composer

    This coach demo provides a Drupal 8 site, using composer and
    the drupal-project composer repo.  The Drupal source code is
    retrieved from git, so composer will need to be run before
    using Drupal, but instructions below should cover that.

    The demo provides the following:

    - standalone nginx and php7 fpm containers
    - a standalone db server, with an empty db (mysql://app:app@db.app/app)
    - read-only source for fpm (but read-write in dev containers)
    - writeable assets, mapped directly into the sites default paths (no sym-links required)
    - command containers for composer/console/drush

    - a host mounted backup folder that can be used for drush dumps

    The database is empty, but you can either include provisioning
    in the custom DB build, or you can install into it.

    There is a writeable settings.local.php in the app/drupal
    folder, but you will have to play around to get settings.php
    writeable (just duplicate what I did for the local settings)

    All of the suggested images in this project are based on
    the wunder-base concept, which is used to provide a commong
    /app project folder, and similar users/OS, to keep access
    privileges working better.
    The builds are all CentOS7, EPEL and often REMI based builds.

    # Getting Started:

      You already did this:

        #/> coach init demo drupal8

      Now just do this:

        $/> coach up

      This should:

        - download some images
        - build any local images that were defined
        - create a source container which will map ./app/source to /app/www/active

        - start an nginx container, and fpm container and a db container

      You should then have

        - http access at host:8080, or directly on the container
        - the http should point to the source code in /app/source

      As Drupal8 needs composer to run, you will need to use the composer command
      container to do the initial installs

        $/> coach @composer run update
        $/> coach @composer run install

    # Day to day use

    ## starting and stopping

        $/> coach stop
        $/> coach start

    ## starting a specific container

      - start a specific node

        $/> coach @www start

      - start all service nodes

        $/> coach %service start

    ## rebuild any containers

      @NOTE that you will lose your DB contents if you don not export them

      1. stop any running containers

        $/> coach stop

      2. remove and created containers

        $/> coach remove

      3. recreate and containers

        $/> coach create

      4. start the new containers

        $/> coach start

    # Alterations that you should make

    ## Installable

    If you can get drush to install, it uses the source as read-write
    so it could avoid any problems.

    You could add a writeable settings.php on top of the read-only
    source, to allow a Drupal install.  Really this should not be
    necessary, as there are plenty of patches out there to allow
    Drupal to be installed if the settings.php give a DB connection
    already.

    You can add a mount to the source container:

      Config:
        Volumes:
          "/app/project/web/sites/default/settings.php": {}

    But you will have to copy the default.settings.php into that new
    file

    ## Custom DB

    You could alter the DB build to include an sql dump

- Type: File 
  Path: .coach/conf.yml
  Contents: |
    # Coach project conf
    #

    # Project name
    Project: drupal8comp

    Author: me

    # Custom Tokens
    Tokens:
      # Set a container domain, which containers can pull in as ENV or box domains
      CONTAINER_DOMAIN: demo.coach

    Path:
      APP: app
      SETTINGS: app/settings
      PROJECT: app/drupal-project
      DRUPAL: app/drupal-project/web

- Type: File
  Path: .coach/nodes.yml 
  Contents: |
    ###
    # Project nodes
    ###

    ###
    # A volume container to hold source which can be shared as Read Only
    #
    # Using a conmtainer to hold source, even if it just locally binded source, is
    # a good idea, because it replicates what a production service would do.  It would
    # have source copied/exported/retrieved in, and make it available in the same way
    #
    source:
      Type: volume

      Docker:
        Config:
          Image: jamesnesbitt/wunder-base # Run from a standard base image
        Host:
          Binds:
            - app/drupal-project:/app/project
            - app/settings/drupal:/app/project/web/sites/default/localconf

    ###
    # A volume container to hold source which can be shared as Read-Write
    #
    # @note that this container has volumes that might map on top of the 
    #   source container, to provide readable assets inside the read-only
    #   source code.
    #
    assets:
      Type: volume

      Docker:
        Config:
          Image: jamesnesbitt/wunder-base # RUn from a standard base image
        Host:
          Binds:
            - app/assets/files/public:/app/project/web/sites/default/files
            - app/assets/files/private:/app/project/web/sites/default/private

    ###
    # Database service
    #
    # This container uses a local build to extend a base db, adding in a database "app" and changing
    # the root user password
    # 
    # @see ./coach/docker/db/Dockerfile
    #
    # This node needs building !  $/> coach build
    #
    db:
      Type: service

      Docker:
        Build: docker/db          # DB has a docker build so that we can create databases and set custom passwords.

        Config:
          RestartPolicy: on-failure
          OpenStdin: true

    ###
    # FPM service
    #
    # This node implements a standard PHP-FPM service, which you can connect to over
    # TCP/IP.  The node has access to the source via the source container, and the db
    # using a docker link (accessible over TCP/IP at db.app)
    #
    # There are alternative PHP images that you could try, to test out HHVM or PHP7
    # But note that if you switch, you have to recreate the container.
    #
    # Note that the WWW node needs this container
    #
    fpm:
      Type: service

      Docker:
        Config:
          Image: jamesnesbitt/wunder-php7fpm     # The FPM delivers the latest PHP7

        Host:
          Links:
            - db:db.app # make the db container available as db.app
          VolumesFrom:
            - source:ro
            - assets

    ###
    # WWW service
    #
    # An nginx service, that handles http requests, and passes PHP parsing off to 
    # the fpm node.  This node has some custom configurations to try to get it
    # to respond to different URLs appropriately
    #
    # @note that this container binds to the host port for 8080, but can still be 
    #   resolved by pointing to port 80 on the container IP
    # @note that if you are using DNSDOCK, the DNSDOCK_ALIAS will help you browser to the service
    # @note https is an option if you set up the image properly.
    #
    www:
      Type: service

      Docker:
        Build: docker/nginx  # we override the nginx.conf on the default nginx server

        Config:
          Hostname: "%PROJECT" # Token derived from the project name in conf.yml
          Domainname: "%CONTAINER_DOMAIN" # A token explicityl defined in conf,yml
          Env:
            - "DNSDOCK_ALIAS=%PROJECT.%CONTAINER_DOMAIN" # an optional ENV var to set, that works with DNSDOCK if you are using it.
          ExposedPorts:
            80/tcp: {}

        Host:
          Links:
            - fpm:fpm.app # make the fpm service available as fpm.app
          VolumesFrom:
            - source:ro
            - assets
          # PortBindings: # Use this if you want nginx to respond to 8080 on the host
          #   80/tcp:
          #     - HostPort: 8080 # Port 80 applies to all Host IPs

    ###
    #
    # DEVELOPER NODES
    #
    # Developer containers tend to connect to the DB, and map in 
    # source as read-write, along with assets, and some additional
    # files and folder to configure relevant tools.
    #
    # Commonly you map in:
    #  - your user .ssh to get ... ssh access
    #  - drush and console configurations
    #  - git and github so that you can use you user tokens and settings
    #

    ###
    # Command configuration and caches
    #
    # This is a volume container into which you can map files 
    # that are used to configure developer tools, but which you
    # may not want to have available in your www and fpm containers
    #
    commandconfig:
      Type: volume

      Docker:
        Config:
          Image: jamesnesbitt/wunder-base # RUn from a standard base image
        Host:
          Binds:
            - ~/.ssh:/app/ssh
            - ~/.gitconfig:/app/.gitconfig
            - ~/.composer:/app/.composer  # for github tokens
            - app/settings/drush:/app/.drush
            - app/settings/console:/app/.console

    ####
    # Drush console
    #
    # A utility command container that you can use to run drush commands
    ##
    console:
      Type: command

      Docker:
        Config:
          Image: jamesnesbitt/wunder-developershell
          Entrypoint:
            - /app/project/vendor/bin/console
            - --ansi
          WorkingDir: /app/project/web
          Tty: true

        Host:
          Links:
            - db:db.app
          VolumesFrom:
            - source
            - assets

    ####
    # Drush command container
    #
    # A utility command container that you can use to run drush commands
    ##
    drush:
      Type: command

      Docker:
        Config:
          Image: jamesnesbitt/wunder-developershell
          Entrypoint:
            - /app/project/vendor/bin/drush
          WorkingDir: /app/project/web
          Tty: true

        Host:
          Links:
            - db:db.app
          VolumesFrom:
            - source
            - assets
            - commandconfig

    ####
    # composer
    #
    # run the developershell image, but run composer
    # in the app/project/repository
    ##
    composer:
      Type: command

      Docker:
        Config:
          Image: jamesnesbitt/wunder-developershell
          WorkingDir: /app/project
          Entrypoint:
            - /usr/bin/composer
          Tty: true
        Host:
          Dns: 
            - 8.8.8.8
          VolumesFrom:
            - source
            - assets
            - commandconfig


- Type: File
  Path: .coach/docker/db/README.md
  Contents: |
    # DB Docker Build

    This is a Docker build that can optionally be used for building a custom Database
    image for the local project.

    To use this build, add "docker/db" (the path inside the .coach folder) to an node,
    and then you can use "$/> docker build" to build all node images
- Type: File
  Path: .coach/docker/db/Dockerfile
  Contents: |
    FROM        jamesnesbitt/wunder-mariadb
    MAINTAINER  james.nesbitt@wunderkraut.com

    ### ProjectDB --------------------------------------------------------------------


    # Create our project DB
    #
    # - set the root user password to something safe (considered a good idea)
    # - create an "app" database
    # - give access to the new database to an "app" user using the password "app"
    # - app user can only access from 172.* IPs !!!! (inside the docker subnet)
    # - flush access
    #
    RUN (/usr/bin/mysqld_safe &) && sleep 5 && \
        mysql -uroot -e "UPDATE mysql.user SET Password=PASSWORD('H4x0r') WHERE User='root'" && \
        mysql -uroot -e "CREATE DATABASE app" && \
        mysql -uroot -e "GRANT ALL ON app.* to app@'172.%' IDENTIFIED BY 'app'" && \
        mysql -uroot -e "FLUSH PRIVILEGES"

    ### /ProjectDB -------------------------------------------------------------------
- Type: File
  Path: .coach/docker/nginx/README.md
  Contents: |
    # custom nginx build

    This demo uses a custom nginx build, which overrides the default.conf
    nginx conf, to point to the drupal-project web-root, which is at 
    ./app/drupal-project/web/
- Type: File
  Path: .coach/docker/nginx/Dockerfile
  Contents: |
    FROM        jamesnesbitt/wunder-nginx
    MAINTAINER  james.nesbitt@wunderkraut.com

    ### NGINX --------------------------------------------------------------------

    # Use new nginx vhost conf for the d8 project web-root
    #
    ADD etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf

    ### /NGINX -------------------------------------------------------------------
- Type: File
  Path: .coach/docker/nginx/etc/nginx/conf.d/default.conf
  Contents: |
    server {
      listen       80 default_server;
      server_name  _;
      root /app/project/web;

      error_log /app/log/nginx/error.log;
      access_log /app/log/nginx/access.log;

      charset utf8;

      gzip_static on;

      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      location ~ \..*/.*\.php$ {
        return 403;
      }

      # No no for private
      location ~ ^/sites/.*/private/ {
        return 403;
      }

      # Block access to "hidden" files and directories whose names begin with a
      # period. This includes directories used by version control systems such
      # as Subversion or Git to store control files.
      location ~ (^|/)\. {
        return 403;
      }

      location / {
        # This is cool because no php is touched for static content
        try_files $uri @rewrite;
      }

      location @rewrite {
        rewrite ^ /index.php;
      }

      location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass fpm.app:9000;
      }

      # Fighting with Styles? This little gem is amazing.
      location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
      }

      location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
      }
    }

- Type: File
  Path: app/README.md
  Contents: |
    # DEMO Drupal 8

    ## /app/drupal-project

    Drupal 8 source as provided by the drupalproject

    https://github.com/drupal-composer/drupal-project.git

    This source is cloned during project init, so it is a
    clean copy.  You will probably want to remote the git
    remote, and make some changes

    Note that many of the paths in the source are mapped
    over in the containers, so that the assets paths can 
    be mapped over the source code.  this allows source 
    to be mounted as read-only, for security.

    # /app/assets/

    ## /app/assets/files

    The two folders inside this path will be mounted into
    containers for the sites/default public and private 
    files paths.

    # /app/settings

    Various cli app configurations

    # /app/settings/console

    Configurations for the Drupal console command container

    # /app/settings/drush

    Configurations and aliases for drush

    # /app/settings/settings.local.php

    An example for how to mount a local file over the source
    code, this keeps the local settings file out of the source code

    # /app/backups

    Mounted into the containers as an optional destination for
    backup and archive dumping.

- Type: GitClone
  Path: app/drupal-project
  Url: https://github.com/drupal-composer/drupal-project.git

- Type: File
  Path: app/assets/files/private/.gitkeep
  Contents: keep this folder
- Type: File
  Path: app/drupal-project/web/sites/default/files/private/.gitkeep
  Contents: keep this folder. Coach will map over the app/assets/files/private folder at runtime

- Type: File
  Path: app/assets/files/public/.gitkeep
  Contents: keep this folder
- Type: File
  Path: app/drupal-project/web/sites/default/files/public/.gitkeep
  Contents: keep this folder. Coach will map over the app/assets/files/public folder at runtime

- Type: File
  Path: app/settings/console/.gitkeep
  Contents: Keep this folder
- Type: File
  Path: app/settings/drush/.gitkeep
  Contents: Keep this folder

- Type: File
  Path: app/drupal-project/web/sites/default/services.yml
  Contents: |
    parameters:
      session.storage.options:
        # Default ini options for sessions.
        #
        # Some distributions of Linux (most notably Debian) ship their PHP
        # installations with garbage collection (gc) disabled. Since Drupal depends
        # on PHP's garbage collection for clearing sessions, ensure that garbage
        # collection occurs by using the most common settings.
        # @default 1
        gc_probability: 1
        # @default 100
        gc_divisor: 100
        #
        # Set session lifetime (in seconds), i.e. the time from the user's last
        # visit to the active session may be deleted by the session garbage
        # collector. When a session is deleted, authenticated users are logged out,
        # and the contents of the user's $_SESSION variable is discarded.
        # @default 200000
        gc_maxlifetime: 200000
        #
        # Set session cookie lifetime (in seconds), i.e. the time from the session
        # is created to the cookie expires, i.e. when the browser is expected to
        # discard the cookie. The value 0 means "until the browser is closed".
        # @default 2000000
        cookie_lifetime: 2000000
        #
        # Drupal automatically generates a unique session cookie name based on the
        # full domain name used to access the site. This mechanism is sufficient
        # for most use-cases, including multi-site deployments. However, if it is
        # desired that a session can be reused across different subdomains, the
        # cookie domain needs to be set to the shared base domain. Doing so assures
        # that users remain logged in as they cross between various subdomains.
        # To maximize compatibility and normalize the behavior across user agents,
        # the cookie domain should start with a dot.
        #
        # @default none
        # cookie_domain: '.example.com'
        #
      twig.config:
        # Twig debugging:
        #
        # When debugging is enabled:
        # - The markup of each Twig template is surrounded by HTML comments that
        #   contain theming information, such as template file name suggestions.
        # - Note that this debugging markup will cause automated tests that directly
        #   check rendered HTML to fail. When running automated tests, 'debug'
        #   should be set to FALSE.
        # - The dump() function can be used in Twig templates to output information
        #   about template variables.
        # - Twig templates are automatically recompiled whenever the source code
        #   changes (see auto_reload below).
        #
        # For more information about debugging Twig templates, see
        # https://www.drupal.org/node/1906392.
        #
        # Not recommended in production environments
        # @default false
        debug: false
        # Twig auto-reload:
        #
        # Automatically recompile Twig templates whenever the source code changes.
        # If you don't provide a value for auto_reload, it will be determined
        # based on the value of debug.
        #
        # Not recommended in production environments
        # @default null
        auto_reload: null
        # Twig cache:
        #
        # By default, Twig templates will be compiled and stored in the filesystem
        # to increase performance. Disabling the Twig cache will recompile the
        # templates from source each time they are used. In most cases the
        # auto_reload setting above should be enabled rather than disabling the
        # Twig cache.
        #
        # Not recommended in production environments
        # @default true
        cache: true
      renderer.config:
        # Renderer required cache contexts:
        #
        # The Renderer will automatically associate these cache contexts with every
        # render array, hence varying every render array by these cache contexts.
        #
        # @default ['languages:language_interface', 'theme', 'user.permissions']
        required_cache_contexts: ['languages:language_interface', 'theme', 'user.permissions']
        # Renderer automatic placeholdering conditions:
        #
        # Drupal allows portions of the page to be automatically deferred when
        # rendering to improve cache performance. That is especially helpful for
        # cache contexts that vary widely, such as the active user. On some sites
        # those may be different, however, such as sites with only a handful of
        # users. If you know what the high-cardinality cache contexts are for your
        # site, specify those here. If you're not sure, the defaults are fairly safe
        # in general.
        #
        # For more information about rendering optimizations see
        # https://www.drupal.org/developing/api/8/render/arrays/cacheability#optimizing
        auto_placeholder_conditions:
          # Max-age at or below which caching is not considered worthwhile.
          #
          # Disable by setting to -1.
          #
          # @default 0
          max-age: 0
          # Cache contexts with a high cardinality.
          #
          # Disable by setting to [].
          #
          # @default ['session', 'user']
          contexts: ['session', 'user']
          # Tags with a high invalidation frequency.
          #
          # Disable by setting to [].
          #
          # @default []
          tags: []
      # Cacheability debugging:
      #
      # Responses with cacheability metadata (CacheableResponseInterface instances)
      # get X-Drupal-Cache-Tags and X-Drupal-Cache-Contexts headers.
      #
      # For more information about debugging cacheable responses, see
      # https://www.drupal.org/developing/api/8/response/cacheable-response-interface
      #
      # Not recommended in production environments
      # @default false
      http.response.debug_cacheability_headers: false
      factory.keyvalue:
        {}
        # Default key/value storage service to use.
        # @default keyvalue.database
        # default: keyvalue.database
        # Collection-specific overrides.
        # state: keyvalue.database
      factory.keyvalue.expirable:
        {}
        # Default key/value expirable storage service to use.
        # @default keyvalue.database.expirable
        # default: keyvalue.database.expirable
      # Allowed protocols for URL generation.
      filter_protocols:
        - http
        - https
        - ftp
        - news
        - nntp
        - tel
        - telnet
        - mailto
        - irc
        - ssh
        - sftp
        - webcal
        - rtsp
- Type: File
  Path: app/drupal-project/web/sites/default/settings.php
  Contents: |
    <?php

    /**
     * @file
     * Drupal site-specific configuration file.
     *
     * IMPORTANT NOTE:
     * This file may have been set to read-only by the Drupal installation program.
     * If you make changes to this file, be sure to protect it again after making
     * your modifications. Failure to remove write permissions to this file is a
     * security risk.
     *
     * In order to use the selection rules below the multisite aliasing file named
     * sites/sites.php must be present. Its optional settings will be loaded, and
     * the aliases in the array $sites will override the default directory rules
     * below. See sites/example.sites.php for more information about aliases.
     *
     * The configuration directory will be discovered by stripping the website's
     * hostname from left to right and pathname from right to left. The first
     * configuration file found will be used and any others will be ignored. If no
     * other configuration file is found then the default configuration file at
     * 'sites/default' will be used.
     *
     * For example, for a fictitious site installed at
     * https://www.drupal.org:8080/mysite/test/, the 'settings.php' file is searched
     * for in the following directories:
     *
     * - sites/8080.www.drupal.org.mysite.test
     * - sites/www.drupal.org.mysite.test
     * - sites/drupal.org.mysite.test
     * - sites/org.mysite.test
     *
     * - sites/8080.www.drupal.org.mysite
     * - sites/www.drupal.org.mysite
     * - sites/drupal.org.mysite
     * - sites/org.mysite
     *
     * - sites/8080.www.drupal.org
     * - sites/www.drupal.org
     * - sites/drupal.org
     * - sites/org
     *
     * - sites/default
     *
     * Note that if you are installing on a non-standard port number, prefix the
     * hostname with that number. For example,
     * https://www.drupal.org:8080/mysite/test/ could be loaded from
     * sites/8080.www.drupal.org.mysite.test/.
     *
     * @see example.sites.php
     * @see \Drupal\Core\DrupalKernel::getSitePath()
     *
     * In addition to customizing application settings through variables in
     * settings.php, you can create a services.yml file in the same directory to
     * register custom, site-specific service definitions and/or swap out default
     * implementations with custom ones.
     */

    /**
     * Database settings:
     *
     * The $databases array specifies the database connection or
     * connections that Drupal may use.  Drupal is able to connect
     * to multiple databases, including multiple types of databases,
     * during the same request.
     *
     * Each database connection is specified as an array of settings,
     * similar to the following:
     * @code
     * array(
     *   'driver' => 'mysql',
     *   'database' => 'databasename',
     *   'username' => 'username',
     *   'password' => 'password',
     *   'host' => 'localhost',
     *   'port' => 3306,
     *   'prefix' => 'myprefix_',
     *   'collation' => 'utf8mb4_general_ci',
     * );
     * @endcode
     *
     * The "driver" property indicates what Drupal database driver the
     * connection should use.  This is usually the same as the name of the
     * database type, such as mysql or sqlite, but not always.  The other
     * properties will vary depending on the driver.  For SQLite, you must
     * specify a database file name in a directory that is writable by the
     * webserver.  For most other drivers, you must specify a
     * username, password, host, and database name.
     *
     * Transaction support is enabled by default for all drivers that support it,
     * including MySQL. To explicitly disable it, set the 'transactions' key to
     * FALSE.
     * Note that some configurations of MySQL, such as the MyISAM engine, don't
     * support it and will proceed silently even if enabled. If you experience
     * transaction related crashes with such configuration, set the 'transactions'
     * key to FALSE.
     *
     * For each database, you may optionally specify multiple "target" databases.
     * A target database allows Drupal to try to send certain queries to a
     * different database if it can but fall back to the default connection if not.
     * That is useful for primary/replica replication, as Drupal may try to connect
     * to a replica server when appropriate and if one is not available will simply
     * fall back to the single primary server (The terms primary/replica are
     * traditionally referred to as master/slave in database server documentation).
     *
     * The general format for the $databases array is as follows:
     * @code
     * $databases['default']['default'] = $info_array;
     * $databases['default']['replica'][] = $info_array;
     * $databases['default']['replica'][] = $info_array;
     * $databases['extra']['default'] = $info_array;
     * @endcode
     *
     * In the above example, $info_array is an array of settings described above.
     * The first line sets a "default" database that has one primary database
     * (the second level default).  The second and third lines create an array
     * of potential replica databases.  Drupal will select one at random for a given
     * request as needed.  The fourth line creates a new database with a name of
     * "extra".
     *
     * For a single database configuration, the following is sufficient:
     * @code
     * $databases['default']['default'] = array(
     *   'driver' => 'mysql',
     *   'database' => 'databasename',
     *   'username' => 'username',
     *   'password' => 'password',
     *   'host' => 'localhost',
     *   'prefix' => 'main_',
     *   'collation' => 'utf8mb4_general_ci',
     * );
     * @endcode
     *
     * You can optionally set prefixes for some or all database table names
     * by using the 'prefix' setting. If a prefix is specified, the table
     * name will be prepended with its value. Be sure to use valid database
     * characters only, usually alphanumeric and underscore. If no prefixes
     * are desired, leave it as an empty string ''.
     *
     * To have all database names prefixed, set 'prefix' as a string:
     * @code
     *   'prefix' => 'main_',
     * @endcode
     * To provide prefixes for specific tables, set 'prefix' as an array.
     * The array's keys are the table names and the values are the prefixes.
     * The 'default' element is mandatory and holds the prefix for any tables
     * not specified elsewhere in the array. Example:
     * @code
     *   'prefix' => array(
     *     'default'   => 'main_',
     *     'users'     => 'shared_',
     *     'sessions'  => 'shared_',
     *     'role'      => 'shared_',
     *     'authmap'   => 'shared_',
     *   ),
     * @endcode
     * You can also use a reference to a schema/database as a prefix. This may be
     * useful if your Drupal installation exists in a schema that is not the default
     * or you want to access several databases from the same code base at the same
     * time.
     * Example:
     * @code
     *   'prefix' => array(
     *     'default'   => 'main.',
     *     'users'     => 'shared.',
     *     'sessions'  => 'shared.',
     *     'role'      => 'shared.',
     *     'authmap'   => 'shared.',
     *   );
     * @endcode
     * NOTE: MySQL and SQLite's definition of a schema is a database.
     *
     * Advanced users can add or override initial commands to execute when
     * connecting to the database server, as well as PDO connection settings. For
     * example, to enable MySQL SELECT queries to exceed the max_join_size system
     * variable, and to reduce the database connection timeout to 5 seconds:
     *
     * @code
     * $databases['default']['default'] = array(
     *   'init_commands' => array(
     *     'big_selects' => 'SET SQL_BIG_SELECTS=1',
     *   ),
     *   'pdo' => array(
     *     PDO::ATTR_TIMEOUT => 5,
     *   ),
     * );
     * @endcode
     *
     * WARNING: These defaults are designed for database portability. Changing them
     * may cause unexpected behavior, including potential data loss.
     *
     * @see DatabaseConnection_mysql::__construct
     * @see DatabaseConnection_pgsql::__construct
     * @see DatabaseConnection_sqlite::__construct
     *
     * Database configuration format:
     * @code
     *   $databases['default']['default'] = array(
     *     'driver' => 'mysql',
     *     'database' => 'databasename',
     *     'username' => 'username',
     *     'password' => 'password',
     *     'host' => 'localhost',
     *     'prefix' => '',
     *   );
     *   $databases['default']['default'] = array(
     *     'driver' => 'pgsql',
     *     'database' => 'databasename',
     *     'username' => 'username',
     *     'password' => 'password',
     *     'host' => 'localhost',
     *     'prefix' => '',
     *   );
     *   $databases['default']['default'] = array(
     *     'driver' => 'sqlite',
     *     'database' => '/path/to/databasefilename',
     *   );
     * @endcode
     */
    $databases = array();

    /**
     * Location of the site configuration files.
     *
     * The $config_directories array specifies the location of file system
     * directories used for configuration data. On install, the "sync" directory is
     * created. This is used for configuration imports. The "active" directory is
     * not created by default since the default storage for active configuration is
     * the database rather than the file system. (This can be changed. See "Active
     * configuration settings" below).
     *
     * The default location for the "sync" directory is inside a randomly-named
     * directory in the public files path. The setting below allows you to override
     * the "sync" location.
     *
     * If you use files for the "active" configuration, you can tell the
     * Configuration system where this directory is located by adding an entry with
     * array key CONFIG_ACTIVE_DIRECTORY.
     *
     * Example:
     * @code
     *   $config_directories = array(
     *     CONFIG_SYNC_DIRECTORY => '/directory/outside/webroot',
     *   );
     * @endcode
     */
    $config_directories = array();

    /**
     * Settings:
     *
     * $settings contains environment-specific configuration, such as the files
     * directory and reverse proxy address, and temporary configuration, such as
     * security overrides.
     *
     * @see \Drupal\Core\Site\Settings::get()
     */

    /**
     * The active installation profile.
     *
     * Changing this after installation is not recommended as it changes which
     * directories are scanned during extension discovery. If this is set prior to
     * installation this value will be rewritten according to the profile selected
     * by the user.
     *
     * @see install_select_profile()
     */
    # $settings['install_profile'] = '';

    /**
     * Salt for one-time login links, cancel links, form tokens, etc.
     *
     * This variable will be set to a random value by the installer. All one-time
     * login links will be invalidated if the value is changed. Note that if your
     * site is deployed on a cluster of web servers, you must ensure that this
     * variable has the same value on each server.
     *
     * For enhanced security, you may set this variable to the contents of a file
     * outside your document root; you should also ensure that this file is not
     * stored with backups of your database.
     *
     * Example:
     * @code
     *   $settings['hash_salt'] = file_get_contents('/home/example/salt.txt');
     * @endcode
     */
    $settings['hash_salt'] = 'CBnjJtSJassCiM1_Yakem4B44Kor1Wm0n7eSEu3mhEDUpXnHLBTGS7_HV5DNu2n3Ij3TqbSpzQ';

    /**
     * Deployment identifier.
     *
     * Drupal's dependency injection container will be automatically invalidated and
     * rebuilt when the Drupal core version changes. When updating contributed or
     * custom code that changes the container, changing this identifier will also
     * allow the container to be invalidated as soon as code is deployed.
     */
    # $settings['deployment_identifier'] = \Drupal::VERSION;

    /**
     * Access control for update.php script.
     *
     * If you are updating your Drupal installation using the update.php script but
     * are not logged in using either an account with the "Administer software
     * updates" permission or the site maintenance account (the account that was
     * created during installation), you will need to modify the access check
     * statement below. Change the FALSE to a TRUE to disable the access check.
     * After finishing the upgrade, be sure to open this file again and change the
     * TRUE back to a FALSE!
     */
    $settings['update_free_access'] = FALSE;

    /**
     * External access proxy settings:
     *
     * If your site must access the Internet via a web proxy then you can enter
     * the proxy settings here. Currently only basic authentication is supported
     * by using the username and password variables. The proxy_user_agent variable
     * can be set to NULL for proxies that require no User-Agent header or to a
     * non-empty string for proxies that limit requests to a specific agent. The
     * proxy_exceptions variable is an array of host names to be accessed directly,
     * not via proxy.
     */
    # $settings['proxy_server'] = '';
    # $settings['proxy_port'] = 8080;
    # $settings['proxy_username'] = '';
    # $settings['proxy_password'] = '';
    # $settings['proxy_user_agent'] = '';
    # $settings['proxy_exceptions'] = array('127.0.0.1', 'localhost');

    /**
     * Reverse Proxy Configuration:
     *
     * Reverse proxy servers are often used to enhance the performance
     * of heavily visited sites and may also provide other site caching,
     * security, or encryption benefits. In an environment where Drupal
     * is behind a reverse proxy, the real IP address of the client should
     * be determined such that the correct client IP address is available
     * to Drupal's logging, statistics, and access management systems. In
     * the most simple scenario, the proxy server will add an
     * X-Forwarded-For header to the request that contains the client IP
     * address. However, HTTP headers are vulnerable to spoofing, where a
     * malicious client could bypass restrictions by setting the
     * X-Forwarded-For header directly. Therefore, Drupal's proxy
     * configuration requires the IP addresses of all remote proxies to be
     * specified in $settings['reverse_proxy_addresses'] to work correctly.
     *
     * Enable this setting to get Drupal to determine the client IP from
     * the X-Forwarded-For header (or $settings['reverse_proxy_header'] if set).
     * If you are unsure about this setting, do not have a reverse proxy,
     * or Drupal operates in a shared hosting environment, this setting
     * should remain commented out.
     *
     * In order for this setting to be used you must specify every possible
     * reverse proxy IP address in $settings['reverse_proxy_addresses'].
     * If a complete list of reverse proxies is not available in your
     * environment (for example, if you use a CDN) you may set the
     * $_SERVER['REMOTE_ADDR'] variable directly in settings.php.
     * Be aware, however, that it is likely that this would allow IP
     * address spoofing unless more advanced precautions are taken.
     */
    # $settings['reverse_proxy'] = TRUE;

    /**
     * Specify every reverse proxy IP address in your environment.
     * This setting is required if $settings['reverse_proxy'] is TRUE.
     */
    # $settings['reverse_proxy_addresses'] = array('a.b.c.d', ...);

    /**
     * Set this value if your proxy server sends the client IP in a header
     * other than X-Forwarded-For.
     */
    # $settings['reverse_proxy_header'] = 'X_CLUSTER_CLIENT_IP';

    /**
     * Set this value if your proxy server sends the client protocol in a header
     * other than X-Forwarded-Proto.
     */
    # $settings['reverse_proxy_proto_header'] = 'X_FORWARDED_PROTO';

    /**
     * Set this value if your proxy server sends the client protocol in a header
     * other than X-Forwarded-Host.
     */
    # $settings['reverse_proxy_host_header'] = 'X_FORWARDED_HOST';

    /**
     * Set this value if your proxy server sends the client protocol in a header
     * other than X-Forwarded-Port.
     */
    # $settings['reverse_proxy_port_header'] = 'X_FORWARDED_PORT';

    /**
     * Set this value if your proxy server sends the client protocol in a header
     * other than Forwarded.
     */
    # $settings['reverse_proxy_forwarded_header'] = 'FORWARDED';

    /**
     * Page caching:
     *
     * By default, Drupal sends a "Vary: Cookie" HTTP header for anonymous page
     * views. This tells a HTTP proxy that it may return a page from its local
     * cache without contacting the web server, if the user sends the same Cookie
     * header as the user who originally requested the cached page. Without "Vary:
     * Cookie", authenticated users would also be served the anonymous page from
     * the cache. If the site has mostly anonymous users except a few known
     * editors/administrators, the Vary header can be omitted. This allows for
     * better caching in HTTP proxies (including reverse proxies), i.e. even if
     * clients send different cookies, they still get content served from the cache.
     * However, authenticated users should access the site directly (i.e. not use an
     * HTTP proxy, and bypass the reverse proxy if one is used) in order to avoid
     * getting cached pages from the proxy.
     */
    # $settings['omit_vary_cookie'] = TRUE;

    /**
     * Class Loader.
     *
     * If the APC extension is detected, the Symfony APC class loader is used for
     * performance reasons. Detection can be prevented by setting
     * class_loader_auto_detect to false, as in the example below.
     */
    # $settings['class_loader_auto_detect'] = FALSE;

    /*
     * If the APC extension is not detected, either because APC is missing or
     * because auto-detection has been disabled, auto-loading falls back to
     * Composer's ClassLoader, which is good for development as it does not break
     * when code is moved in the file system. You can also decorate the base class
     * loader with another cached solution than the Symfony APC class loader, as
     * all production sites should have a cached class loader of some sort enabled.
     *
     * To do so, you may decorate and replace the local $class_loader variable. For
     * example, to use Symfony's APC class loader without automatic detection,
     * uncomment the code below.
     */
    /*
    if ($settings['hash_salt']) {
      $prefix = 'drupal.' . hash('sha256', 'drupal.' . $settings['hash_salt']);
      $apc_loader = new \Symfony\Component\ClassLoader\ApcClassLoader($prefix, $class_loader);
      unset($prefix);
      $class_loader->unregister();
      $apc_loader->register();
      $class_loader = $apc_loader;
    }
    */

    /**
     * Authorized file system operations:
     *
     * The Update Manager module included with Drupal provides a mechanism for
     * site administrators to securely install missing updates for the site
     * directly through the web user interface. On securely-configured servers,
     * the Update manager will require the administrator to provide SSH or FTP
     * credentials before allowing the installation to proceed; this allows the
     * site to update the new files as the user who owns all the Drupal files,
     * instead of as the user the webserver is running as. On servers where the
     * webserver user is itself the owner of the Drupal files, the administrator
     * will not be prompted for SSH or FTP credentials (note that these server
     * setups are common on shared hosting, but are inherently insecure).
     *
     * Some sites might wish to disable the above functionality, and only update
     * the code directly via SSH or FTP themselves. This setting completely
     * disables all functionality related to these authorized file operations.
     *
     * @see https://www.drupal.org/node/244924
     *
     * Remove the leading hash signs to disable.
     */
    # $settings['allow_authorize_operations'] = FALSE;

    /**
     * Default mode for directories and files written by Drupal.
     *
     * Value should be in PHP Octal Notation, with leading zero.
     */
    # $settings['file_chmod_directory'] = 0775;
    # $settings['file_chmod_file'] = 0664;

    /**
     * Public file base URL:
     *
     * An alternative base URL to be used for serving public files. This must
     * include any leading directory path.
     *
     * A different value from the domain used by Drupal to be used for accessing
     * public files. This can be used for a simple CDN integration, or to improve
     * security by serving user-uploaded files from a different domain or subdomain
     * pointing to the same server. Do not include a trailing slash.
     */
    # $settings['file_public_base_url'] = 'http://downloads.example.com/files';

    /**
     * Public file path:
     *
     * A local file system path where public files will be stored. This directory
     * must exist and be writable by Drupal. This directory must be relative to
     * the Drupal installation directory and be accessible over the web.
     */
    # $settings['file_public_path'] = 'sites/default/files';

    /**
     * Private file path:
     *
     * A local file system path where private files will be stored. This directory
     * must be absolute, outside of the Drupal installation directory and not
     * accessible over the web.
     *
     * Note: Caches need to be cleared when this value is changed to make the
     * private:// stream wrapper available to the system.
     *
     * See https://www.drupal.org/documentation/modules/file for more information
     * about securing private files.
     */
    # $settings['file_private_path'] = '';

    /**
     * Session write interval:
     *
     * Set the minimum interval between each session write to database.
     * For performance reasons it defaults to 180.
     */
    # $settings['session_write_interval'] = 180;

    /**
     * String overrides:
     *
     * To override specific strings on your site with or without enabling the Locale
     * module, add an entry to this list. This functionality allows you to change
     * a small number of your site's default English language interface strings.
     *
     * Remove the leading hash signs to enable.
     *
     * The "en" part of the variable name, is dynamic and can be any langcode of
     * any added language. (eg locale_custom_strings_de for german).
     */
    # $settings['locale_custom_strings_en'][''] = array(
    #   'forum'      => 'Discussion board',
    #   '@count min' => '@count minutes',
    # );

    /**
     * A custom theme for the offline page:
     *
     * This applies when the site is explicitly set to maintenance mode through the
     * administration page or when the database is inactive due to an error.
     * The template file should also be copied into the theme. It is located inside
     * 'core/modules/system/templates/maintenance-page.html.twig'.
     *
     * Note: This setting does not apply to installation and update pages.
     */
    # $settings['maintenance_theme'] = 'bartik';

    /**
     * PHP settings:
     *
     * To see what PHP settings are possible, including whether they can be set at
     * runtime (by using ini_set()), read the PHP documentation:
     * http://php.net/manual/ini.list.php
     * See \Drupal\Core\DrupalKernel::bootEnvironment() for required runtime
     * settings and the .htaccess file for non-runtime settings.
     * Settings defined there should not be duplicated here so as to avoid conflict
     * issues.
     */

    /**
     * If you encounter a situation where users post a large amount of text, and
     * the result is stripped out upon viewing but can still be edited, Drupal's
     * output filter may not have sufficient memory to process it.  If you
     * experience this issue, you may wish to uncomment the following two lines
     * and increase the limits of these variables.  For more information, see
     * http://php.net/manual/pcre.configuration.php.
     */
    # ini_set('pcre.backtrack_limit', 200000);
    # ini_set('pcre.recursion_limit', 200000);

    /**
     * Active configuration settings.
     *
     * By default, the active configuration is stored in the database in the
     * {config} table. To use a different storage mechanism for the active
     * configuration, do the following prior to installing:
     * - Create an "active" directory and declare its path in $config_directories
     *   as explained under the 'Location of the site configuration files' section
     *   above in this file. To enhance security, you can declare a path that is
     *   outside your document root.
     * - Override the 'bootstrap_config_storage' setting here. It must be set to a
     *   callable that returns an object that implements
     *   \Drupal\Core\Config\StorageInterface.
     * - Override the service definition 'config.storage.active'. Put this
     *   override in a services.yml file in the same directory as settings.php
     *   (definitions in this file will override service definition defaults).
     */
    # $settings['bootstrap_config_storage'] = array('Drupal\Core\Config\BootstrapConfigStorageFactory', 'getFileStorage');

    /**
     * Configuration overrides.
     *
     * To globally override specific configuration values for this site,
     * set them here. You usually don't need to use this feature. This is
     * useful in a configuration file for a vhost or directory, rather than
     * the default settings.php.
     *
     * Note that any values you provide in these variable overrides will not be
     * viewable from the Drupal administration interface. The administration
     * interface displays the values stored in configuration so that you can stage
     * changes to other environments that don't have the overrides.
     *
     * There are particular configuration values that are risky to override. For
     * example, overriding the list of installed modules in 'core.extension' is not
     * supported as module install or uninstall has not occurred. Other examples
     * include field storage configuration, because it has effects on database
     * structure, and 'core.menu.static_menu_link_overrides' since this is cached in
     * a way that is not config override aware. Also, note that changing
     * configuration values in settings.php will not fire any of the configuration
     * change events.
     */
    # $config['system.site']['name'] = 'My Drupal site';
    # $config['system.theme']['default'] = 'stark';
    # $config['user.settings']['anonymous'] = 'Visitor';

    /**
     * Fast 404 pages:
     *
     * Drupal can generate fully themed 404 pages. However, some of these responses
     * are for images or other resource files that are not displayed to the user.
     * This can waste bandwidth, and also generate server load.
     *
     * The options below return a simple, fast 404 page for URLs matching a
     * specific pattern:
     * - $config['system.performance']['fast_404']['exclude_paths']: A regular
     *   expression to match paths to exclude, such as images generated by image
     *   styles, or dynamically-resized images. The default pattern provided below
     *   also excludes the private file system. If you need to add more paths, you
     *   can add '|path' to the expression.
     * - $config['system.performance']['fast_404']['paths']: A regular expression to
     *   match paths that should return a simple 404 page, rather than the fully
     *   themed 404 page. If you don't have any aliases ending in htm or html you
     *   can add '|s?html?' to the expression.
     * - $config['system.performance']['fast_404']['html']: The html to return for
     *   simple 404 pages.
     *
     * Remove the leading hash signs if you would like to alter this functionality.
     */
    # $config['system.performance']['fast_404']['exclude_paths'] = '/\/(?:styles)|(?:system\/files)\//';
    # $config['system.performance']['fast_404']['paths'] = '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)$/i';
    # $config['system.performance']['fast_404']['html'] = '<!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>';

    /**
     * Load services definition file.
     */
    $settings['container_yamls'][] = __DIR__ . '/services.yml';

    /**
     * Override the default service container class.
     *
     * This is useful for example to trace the service container for performance
     * tracking purposes, for testing a service container with an error condition or
     * to test a service container that throws an exception.
     */
    # $settings['container_base_class'] = '\Drupal\Core\DependencyInjection\Container';

    /**
     * Trusted host configuration.
     *
     * Drupal core can use the Symfony trusted host mechanism to prevent HTTP Host
     * header spoofing.
     *
     * To enable the trusted host mechanism, you enable your allowable hosts
     * in $settings['trusted_host_patterns']. This should be an array of regular
     * expression patterns, without delimiters, representing the hosts you would
     * like to allow.
     *
     * For example:
     * @code
     * $settings['trusted_host_patterns'] = array(
     *   '^www\.example\.com$',
     * );
     * @endcode
     * will allow the site to only run from www.example.com.
     *
     * If you are running multisite, or if you are running your site from
     * different domain names (eg, you don't redirect http://www.example.com to
     * http://example.com), you should specify all of the host patterns that are
     * allowed by your site.
     *
     * For example:
     * @code
     * $settings['trusted_host_patterns'] = array(
     *   '^example\.com$',
     *   '^.+\.example\.com$',
     *   '^example\.org$',
     *   '^.+\.example\.org$',
     * );
     * @endcode
     * will allow the site to run off of all variants of example.com and
     * example.org, with all subdomains included.
     */

    /**
     * Load local development override configuration, if available.
     *
     * Use settings.local.php to override variables on secondary (staging,
     * development, etc) installations of this site. Typically used to disable
     * caching, JavaScript/CSS compression, re-routing of outgoing emails, and
     * other things that should not happen on development and testing sites.
     *
     * Keep this code block at the end of this file to take full effect.
     */
    if (file_exists(__DIR__ . '/localconf/settings.local.php')) {
      include __DIR__ . '/localconf/settings.local.php';
    }
    if (file_exists(__DIR__ . '/localconf/services.local.yml')) {
      $settings['container_yamls'][] = __DIR__ . '/localconf/services.local.yml';
    }
- Type: File
  Path: app/drupal-project/web/sites/default/localconf/.gitkeep
  Contents: Keep this folder.  Coach will overlay app/settings/drupal on top at runtime

- Type: File
  Path: app/settings/drupal/settings.local.php
  Contents: |
    <?php

    /**
     * @file
     *
     * Local development override configuration feature.
     */
    $databases['default']['default'] = [array (]
      'database' => 'app',
      'username' => 'app',
      'password' => 'app',
      'prefix' => '',
      'host' => 'db.app',
      'port' => '3306',
      'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
      'driver' => 'mysql',
    ];

    /**
     * Trusted Host settings
     *
     * Mark some domains as being in the acceptable host domains, for better
     * system security.  This isn't necessary, but it will clear some system
     * warnings that you may see in logs, or in the status report page.
     *
     * @see https://www.drupal.org/node/1992030
     */
    $settings['trusted_host_patterns'] = [
      'localhost',
      '\.dev$',
      '\.vm$',
      '\.local$',
      '\.docker$',
    ];

    /**
     * Assertions.
     *
     * The Drupal project primarily uses runtime assertions to enforce the
     * expectations of the API by failing when incorrect calls are made by code
     * under development.
     *
     * @see http://php.net/assert
     * @see https://www.drupal.org/node/2492225
     *
     * If you are using PHP 7.0 it is strongly recommended that you set
     * zend.assertions=1 in the PHP.ini file (It cannot be changed from .htaccess
     * or runtime) on development machines and to 0 in production.
     *
     * @see https://wiki.php.net/rfc/expectations
     */
    assert_options(ASSERT_ACTIVE, TRUE);
    \Drupal\Component\Assertion\Handle::register();

    /**
     * Enable local development services.
     */
    $settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';

    /**
     * Show all error messages, with backtrace information.
     *
     * In case the error level could not be fetched from the database, as for
     * example the database connection failed, we rely only on this value.
     */
    $config['system.logging']['error_level'] = 'verbose';

    /**
     * Disable CSS and JS aggregation.
     */
    $config['system.performance']['css']['preprocess'] = FALSE;
    $config['system.performance']['js']['preprocess'] = FALSE;

    /**
     * Disable the render cache (this includes the page cache).
     *
     * Note: you should test with the render cache enabled, to ensure the correct
     * cacheability metadata is present. However, in the early stages of
     * development, you may want to disable it.
     *
     * This setting disables the render cache by using the Null cache back-end
     * defined by the development.services.yml file above.
     *
     * Do not use this setting until after the site is installed.
     */
    # $settings['cache']['bins']['render'] = 'cache.backend.null';

    /**
     * Disable Dynamic Page Cache.
     *
     * Note: you should test with Dynamic Page Cache enabled, to ensure the correct
     * cacheability metadata is present (and hence the expected behavior). However,
     * in the early stages of development, you may want to disable it.
     */
    # $settings['cache']['bins']['dynamic_page_cache'] = 'cache.backend.null';

    /**
     * Allow test modules and themes to be installed.
     *
     * Drupal ignores test modules and themes by default for performance reasons.
     * During development it can be useful to install test extensions for debugging
     * purposes.
     */
    $settings['extension_discovery_scan_tests'] = TRUE;

    /**
     * Enable access to rebuild.php.
     *
     * This setting can be enabled to allow Drupal's php and database cached
     * storage to be cleared via the rebuild.php page. Access to this page can also
     * be gained by generating a query string from rebuild_token_calculator.sh and
     * using these parameters in a request to rebuild.php.
     */
    $settings['rebuild_access'] = TRUE;
- Type: File
  Path: app/drupal-project/web/sites/default/settings.local.php
  Contents: |
    <?php
    /** 
     * keep this file. 
     *
     * Coach will map over the app/settings/drupal/settings.local.php file at runtime
     */
     